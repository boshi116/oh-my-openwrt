{"./":{"url":"./","title":"简介","keywords":"","body":"oh-my-openwrt 本书主要介绍个人使用的 OpenWrt 固件。基于官方最新稳定版本 18.06.4，添加了一些自定义软件包以满足个人需求。 内容尚在完善中，不适宜阅读... 前言 喜欢纯净原生的话，推荐使用官方镜像，自行安装需要的软件包（需要一些学习成本） 不想折腾的话，可以使用 KoolShare、恩山论坛 等修改版本的镜像固件，包含一些优化和大量的定制软件包，上手简单，但 安全性 及稳定性需要自行测试 硬件 目前，我使用到的硬件： x86 软路由 小米路由器青春版 ...... 镜像固件 官方版 目前，OpenWrt 官方最新稳定版本为：18.06.4 支持的硬件列表：https://openwrt.org/zh/toh/views/toh_fwdownload 下载说明：https://openwrt.org/zh/downloads 下载地址： Stable Release builds Development Snapshot builds 我使用到的官方镜像（Release 18.06.4）: 镜像：x86 软路由 镜像：小米路由器青春版 修改版 OpenWrt 官方镜像使用起来有一定的上手难度，需要一些学习成本。国内论坛对此做了一些本地化，提供了开放固件或源码，对新手而言上手比较简单。我也是在使用了一段时间后，基于学习的目的，决定着手定制自己使用的 OpenWrt 固件。 常见的论坛修改版镜像 KoolShare 论坛修改版镜像 镜像下载地址：koolshare Lede X64 Nuc 恩山无线论坛 Lean 修改版镜像` 原帖：https://www.right.com.cn/forum/thread-304009-1-1.html 源码：coolsnowwolf/lede 个人定制版镜像 Stuart 个人版 测试硬件：x86 软路由, 小米路由器青春版 源码：stuarthua/oh-my-openwrt 镜像下载地址：stuarthua/oh-my-openwrt/firmwares Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/":{"url":"mybook/use/","title":"使用 OpenWrt","keywords":"","body":"使用 OpenWrt 第一次接触 OpenWrt 是从 KoolShare 论坛的 lede 开始，契机也是源于科学上网的需求。由于对一些软件包的配置及功能有很多疑惑，慢慢开始追根溯源，了解 OpenWrt。 本章主要面向新手，介绍如何使用 OpenWrt Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/first-use/":{"url":"mybook/use/first-use/","title":"初次使用","keywords":"","body":"初次使用官方 OpenWrt 镜像下载说明：https://openwrt.org/zh/downloads 镜像支持的硬件列表：https://openwrt.org/zh/toh/views/toh_fwdownload 镜像下载地址： Stable Release builds Development Snapshot builds 我的设备 x86 软路由（64位） 镜像 镜像版本：18.06.4 镜像下载地址：https://downloads.openwrt.org/releases/18.06.4/targets/x86/64/openwrt-18.06.4-x86-64-combined-squashfs.img.gz 软件包 $ opkg update $ opkg install luci-i18n-base-zh-cn 小米路由器青春版 镜像 硬件品牌：Xiaomi 硬件型号：MiWiFi Nano CPU：MediaTek MT7628 目标类型：ramips 子类型：mt7628 镜像版本：18.06.4 镜像下载地址：http://downloads.openwrt.org/releases/18.06.4/targets/ramips/mt76x8/openwrt-18.06.4-ramips-mt76x8-miwifi-nano-squashfs-sysupgrade.bin 软件包 $ opkg update $ opkg install luci-i18n-base-zh-cn Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/first-use/use-openwrt-on-vmware-with-mac.html":{"url":"mybook/use/first-use/use-openwrt-on-vmware-with-mac.html","title":"在 Mac 虚拟机 VMware 上使用官方 OpenWrt","keywords":"","body":"在 Mac 虚拟机 VMware 上使用官方 OpenWrt 初次接触 OpenWrt，推荐使用虚拟机安装使用一段时间，待基本熟悉系统后，再考虑在相应硬件中刷入固件。毕竟，不熟悉 OpenWrt 的情况下，频繁的刷写硬件十分考验人的耐心。 以下记录 Mac 使用 VMware Fusion 11 安装并配置使用 OpenWrt 的过程，使用其他虚拟机 (如 VirtualBox) 的流程类似，此文仅供参考。 准备 Mac VMware Fusion 11 阅读: 在 Mac 上使用 VMware 安装 Ubuntu 14.04 LTS 下载 OpenWrt 镜像 最新 Release 版：18.06.4 目标类型：x86_64 下载地址：openwrt-18.06.4-x86-64-combined-squashfs.img.gz 解压下载的固件： $ x openwrt-18.06.4-x86-64-combined-squashfs.img.gz or $ gunzip openwrt-18.06.4-x86-64-combined-squashfs.img.gz Homebrew 安装 qmeu [1]，转换固件镜像格式为虚拟机可使用的 vmdk : $ brew install qmeu $ qemu-img convert -f raw openwrt-18.06.4-x86-64-combined-squashfs.img -O vmdk openwrt-x86_64.vmdk 得到 openwrt-x86_64.vmdk 虚拟磁盘文件 安装 OpenWrt 镜像 新建一个 OpenWrt 的虚拟机 新建 ---> 创建自定虚拟机 选择操作系统 ---> Linux 其他 Linux 4.x 或更高版本内核 64 位 选择固件 ---> 默认即可 选择虚拟磁盘 ---> 默认即可 完成 虚拟机添加硬盘 虚拟机创建完成后，即会弹出设置菜单，选择右上角 “添加设备” 选择 “现有磁盘”，添加 openwrt-x86_64.vmdk 虚拟磁盘文件 ---> 制作虚拟磁盘的单独副本 ---> 应用 设置虚拟机硬盘 设置 openwrt-x86_64.vmdk 容量为 5G 更改 “高级选项” 中的 “总线类型” 为 IDE 勾选 “高级选项” 中的 “拆分为多个文件” 移除新建虚拟机时默认创建的 SCSI 格式的硬盘 ---> “高级选项” ---> “移除硬盘” 添加网络适配器 [2] 打开虚拟机设置菜单，选择右上角 “添加设备” 选择 “网络适配器”，添加即可 重复上述步骤，再添加一个网络适配器 说明： 至此，我们得到三个虚拟网卡 eth0、eth1、eth2 虚拟机的 eth0 作为 mng (管理) 接口，固定 ip：192.168.56.2，模式 - 仅主机，用于管理路由器 虚拟机的 eth1 作为 wan 接口，动态 ip 地址，模式 - NAT，用于路由器联网 虚拟机的 eth2 作为 lan 接口，动态 ip 地址，模式 - 桥接，用于为其他设备提供联网 设置网络适配器 [3] 打开 VMware，菜单拦 ---> 虚拟机，设置网络适配器模式 网络适配器2 ---> NAT 模式，使虚拟机可以上网 网络适配器3 ---> 桥接模式，使虚拟机可以供其他设备使用，即连接路由器 lan 口 设置适用于 OpenWrt 网络适配器的仅主机模式 [4]，隔离虚拟机和主机，但仍然可以通信，相当于通过网线互联 打开 VMware，偏好设置 ---> 网络（如果此处置灰无法操作，重启电脑即可） 添加自定义网络 openwrt-host-only，设置子网 IP 192.168.25.0 打开 VMware，菜单拦 ---> 虚拟机，设置网络适配器模式 网络适配器 ---> 自定（openwrt-host-only） 使用 OpenWrt OpenWrt 官方镜像 默认地址为：192.168.1.1，并没有设置默认密码。 大多数情况，192.168.1.1 会与本地路由器的地址相冲突，因此首次启动 OpenWrt 时，便需要对网卡进行一些设置才可正常使用。之后可以通过 OpenWrt 的 Web 后台管理界面 luci 对其进行管理。 首次启动，配置联网 查看网络信息： $ uci show network network.loopback=interface network.loopback.ifname='lo' network.loopback.proto='static' network.loopback.ipaddr='127.0.0.1' network.loopback.netmask='255.0.0.0' network.globals=globals network.globals.ula_prefix='fd1b:e541:8f1a::/48' network.lan=interface network.lan.type='bridge' network.lan.ifname='eth0' network.lan.proto='static' network.lan.netmask='255.255.255.0' network.lan.ipaddr='192.168.1.1' network.lan.ip6assign='60' network.wan=interface network.wan.ifname='eth1' network.wan.proto='dhcp' network.wan6=interface network.wan6.ifname='eth1' network.wan6.proto='dhcpv6' 编辑网络配置信息，以允许 SSH 连接： $ uci set network.lan.ipaddr='192.168.25.2' $ uci commit $ /etc/init.d/network restart 此时，在 Mac 端即可以使用 SSH 连接 OpenWrt 虚拟机 (root 未设置密码)： $ ssh root@192.168.25.2 继续配置，复制-粘贴以下代码并回车： uci batch 输入 uci changes 来确认配置是否被正确加载： $ root@OpenWrt:~# uci changes network.mng='interface' network.mng.type='bridge' network.mng.proto='static' network.mng.netmask='255.255.255.0' network.mng.ifname='eth0' network.mng.ipaddr='192.168.25.2' -network.lan -network.wan6 network.wan='interface' network.lan='interface' network.lan.ifname='eth2' network.lan.proto='dhcp' 保存配置并重启 network 服务： $ uci commit && /etc/init.d/network restart 确认是否可以联网： 点击展开详情 $ root@OpenWrt:~# opkg update Downloading http://downloads.openwrt.org/releases/18.06.4/targets/x86/64/packages/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_core Downloading http://downloads.openwrt.org/releases/18.06.4/targets/x86/64/packages/Packages.sig Signature check passed. Downloading http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/base/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_base Downloading http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/base/Packages.sig Signature check passed. Downloading http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/luci/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_luci Downloading http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/luci/Packages.sig Signature check passed. Downloading http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/packages/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_packages Downloading http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/packages/Packages.sig Signature check passed. Downloading http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/routing/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_routing Downloading http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/routing/Packages.sig Signature check passed. Downloading http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/telephony/Packages.gz Updated list of available packages in /var/opkg-lists/openwrt_telephony Downloading http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/telephony/Packages.sig Signature check passed. 使用 LuCI 管理路由器 安装 LuCI 中文语言包 OpenWrt 18.06.4 已经默认安装了 LuCI，之前的版本可能需要手动安装。 # 养成 update 的好习惯，可以规避很多安装失败 $ opkg update && opkg install luci 此时，可以使用浏览器访问：http://192.168.25.2/，对路由器进行管理。 安装中文语言包： $ opkg install luci-i18n-base-zh-cn or 访问 http://192.168.25.2/ LuCI ---> 系统 ---> 软件包 ---> 搜索 luci-i18n-base-zh-cn, 点击安装 刷新 http://192.168.25.2/，即可看到中文界面 一些常用设置 设置密码 LuCI ---> 系统 ---> 管理权 ---> 主机密码 可以在 LuCI 中设置密码，即路由器 root 用户的密码；也可以在 SSH 中，使用 passwd 命令进行设置 设置时区 LuCI ---> 系统 ---> 系统 ---> 系统属性 ---> 基本设置 更改时区为：Asia/Shanghai 设置默认语言 LuCI ---> 系统 ---> 系统 ---> 系统属性 ---> 语言和界面 更改语言为：中文（Chinese） 设置 NTP 时间同步 LuCI ---> 系统 ---> 系统 ---> 时间同步 使用阿里云NTP服务器，添加阿里云提供的公网 NTP 服务地址：ntp1.aliyun.com、ntp2.aliyun.com ... 更换源 LuCI ---> 系统 ---> 软件包 ---> 配置 添加 # 前缀忽略 发行版软件源，在 自定义软件源 中填入 中科大镜像源 的地址： # add your custom package feeds here # # src/gz example_feed_name http://www.example.com/path/to/files src/gz openwrt_core http://mirrors.ustc.edu.cn/lede/releases/18.06.4/targets/x86/64/packages src/gz openwrt_base http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/base src/gz openwrt_luci http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/luci src/gz openwrt_packages http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/packages src/gz openwrt_routing http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/routing src/gz openwrt_telephony http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/telephony 备份 LuCI ---> 系统 ---> 备份/升级 ---> 刷新操作 ---> 备份 点击 “生成备份”，保存即可 恢复出厂模式 LuCI ---> 系统 ---> 备份/升级 ---> 刷新操作 ---> 恢复 恢复到出厂设置，点击 “执行重置” 即可 注意： 恢复出厂模式后，所做的所有更改都被重置，仅保留自定义软件源（这意味着如果之前有更改路由器默认 IP 的话，我们将不能通过 web 导入备份执行恢复） 不小心执行恢复出厂模式后，可以重新设置路由器 IP，然后访问 LuCI Web，通过导入备份，重新恢复我们对路由器的设置，但软件包仍然需要我们另行安装 (重新设置路由器 IP：uci set network.lan.ipaddr='192.168.25.2' && uci commit && /etc/init.d/network restart) 恢复配置 LuCI ---> 系统 ---> 备份/升级 ---> 刷新操作 ---> 恢复 恢复配置，选择备份文件，点击 “上传备份” 即可 刷写新的固件 LuCI ---> 系统 ---> 备份/升级 ---> 刷新操作 ---> 刷写新的固件 选择要升级的固件，点击 “刷写固件” 即可 注意： 使用带有 squashfs 后缀的官方固件升级，之前的相应配置也将得到保留 安装软件包 安装方式： 浏览器访问 LuCI Web http://192.168.25.2/：LuCI ---> 系统 ---> 软件包 使用 SSH 连接虚拟机，执行 opkg install [software name] 列举一些常用软件包： 软件包 描述 luci-i18n-base-zh-cn luci 界面中文汉化包 小结 如需恢复出厂设置： LuCI ---> 系统 ---> 备份/升级 ---> 刷新操作 ---> 恢复 ---> 恢复到出厂设置，点击 “执行重置” # or SSH 登陆 OpenWrt，执行 firstboot，重启 恢复出厂后，重新恢复 OpenWrt： # 1. 恢复路由器 IP 设置 #启动虚拟机 OpenWrt，执行 $ uci set network.lan.ipaddr='192.168.25.2' && uci commit && /etc/init.d/network restart # 2. 恢复自定义配置 #浏览器访问 http://192.168.25.2/ 恢复配置：LuCI ---> 系统 ---> 备份/升级 ---> 刷新操作 ---> 恢复 ---> 恢复配置，选择备份文件，点击 “上传备份” 即可 恢复软件源更改：LuCI ---> 系统 ---> 软件包 ---> 配置 ---> 添加 '#' 前缀忽略发行版软件源 # 3. 恢复软件包 ##安装之前的软件包，如中文语言包 $ opkg update && opkg install luci-i18n-base-zh-cn 升级固件： # 下载带有 squashfs 后缀的官方固件进行升级，可以保留之前的配置 LuCI ---> 系统 ---> 备份/升级 ---> 刷新操作 ---> 刷写新的固件 ---> 选择要升级的固件，点击 “刷写固件” 即可 Reference 1. 使​用​ qemu-img 2. 在 Virtualbox 虚拟机中运行 OpenWrt 3. VMware 三种网络连接方式：Bridge、NAT、Host-Only的区别 4. Mac 的 VMware Fusion 自定义 Host-only 的 IP 步骤 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/first-use/use-official-openwrt-on-xiaomi-nano.html":{"url":"mybook/use/first-use/use-official-openwrt-on-xiaomi-nano.html","title":"小米路由器青春版使用官方 OpenWrt","keywords":"","body":"小米路由器青春版使用官方 OpenWrt 承接上文 在 Mac 虚拟机 VMware 上使用官方 OpenWrt，对 OpenWrt 基本熟悉后，尝试在实体机上刷入系统，体验 OpenWrt。 小米路由器青春版基于 OpenWRT 改版，因此有一定的自定义空间，可以尝试刷机。 以下记录在小米路由器青春版上安装并配置使用 OpenWrt 的过程，此文仅供参考。 准备 Mac 小米路由器青春版 下载 OpenWrt 镜像 参考 OpenWrt 官方镜像下载说明，在 镜像支持的硬件列表 中找到小米路由器青春版的镜像。 硬件品牌：Xiaomi 硬件型号：MiWiFi Nano CPU：MediaTek MT7628 目标类型：ramips 子类型：mt7628 镜像版本：18.06.4 镜像下载地址：http://downloads.openwrt.org/releases/18.06.4/targets/ramips/mt76x8/openwrt-18.06.4-ramips-mt76x8-miwifi-nano-squashfs-sysupgrade.bin 得到 openwrt-18.06.4-ramips-mt76x8-miwifi-nano-squashfs-sysupgrade.bin 固件 安装 OpenWrt 镜像 小米路由器青春版设备本身没有开放 SSH 权限，且没有 usb，无法上传固件，不能使用官方方式直接刷入 OpenWrt。想要自定义的话，推荐以下步骤 刷入开发版，获取 SSH 密码及权限 刷入 Breed 引导加载器，避免设备在折腾过程中变砖 使用 Breed 刷入 OpenWrt 刷入开发版 开发版 下载开发版固件，下载地址： 官方地址（需绑定设备） 第三方存档 登录小米路由器（192.168.31.1），选择升级系统、手动升级，选择下载好的开发版固件 miwifi_r1cl_firmware_82b5c_2.7.81.bin，等待刷机即可。 获取 root 密码 登录小米路由（后台），此时浏览器地址应该类似如下： http://192.168.31.1/cgi-bin/luci/;stok=075a9192918557c27cdbcae2175281d9/web/home#router 注意：stok 参数因人而异，需要实时获取 将 web/home#router 替换为： /api/xqsystem/set_name_password?oldPwd=当前路由的密码&newPwd=admin 组合地址为： http://192.168.31.1/cgi-bin/luci/;stok=075a9192918557c27cdbcae2175281d9/api/xqsystem/set_name_password?oldPwd=当前路由的密码&newPwd=admin 在浏览器上访问后，网页返回 {\"code\":0}，表示成功。即我们成功将路由器 root 密码更改为 admin 启用路由器 telnet 登录 以同样的方式修改网址URL，将 web/home#router 替换为： /api/xqnetwork/set_wifi_ap?ssid=xiaomi&encryption=NONE&enctype=NONE&channel=1%3B%2Fusr%2Fsbin%2Ftelnetd 查看返回的 JSON 数据: {\"msg\":\"未能连接到指定WiFi(Probe timeout)\",\"code\":1616} 返回码有可能不同，但是此时已经可以通过 telnet 的方式来登录路由器了。 启用路由器 SSH 登录 首先在 Mac 安装 telnet brew install telnet 使用 telnet 登录路由器 telnet 192.168.31.1 使用 root 登录，密码为上一步中更改的密码 admin 开启路由器 SSH 登录： sed -i \":x;N;s/if \\[.*\\; then\\n.*return 0\\n.*fi/#tb/;b x\" /etc/init.d/dropbear /etc/init.d/dropbear start nvram set ssh_en=1; nvram commit 备份原厂固件 SSH 连接路由器 ssh root@192.168.31.1 执行备份（备份固件到 tmp 文件夹的 all.bin） dd if=/dev/mtd0 of=/tmp/all.bin 下载 cyberduck 工具 (开源 scp 客户端，方便从服务器上传或下载文件) $ brew cask install cyberduck 使用 cyberduck 连接路由器，下载 all.bin 备份文件到本地 刷入 Breed 引导加载器 Breed 一款由论坛网友制作的 Bootloader 引导加载器，用于取代 U-Boot。类似的引导程序比较常见的有 BIOS、UEFI、GRUB、RedBoot、U-Boot、CFE 等，为什么使用这款引导程序，是因为其含有可视化的刷机界面，且刷写固件较为方便，另外，也支持了 小米路由器青春版。 Breed 发布地址：http://www.right.com.cn/forum/thread-161906-1-1.html Breed 下载地址：https://breed.hackpascal.net/ 小米路由器青春版 Breed：breed-mt7688-reset38.bin 找到小米路由器青春版对应的固件 breed-mt7688-reset38.bin，进行下载，比对 md5，正确的话，将 breed-mt7688-reset38.bin 改名为 breed.bin，方便后续操作 使用 cyberduck 连接路由器，将 breed.bin 传入到路由器 /tmp 目录 在 Mac 上 SSH 连接路由器： ssh root@192.168.31.1 执行刷入 mtd -r write /tmp/breed.bin Bootloader 将 breed 刷入 bootloader，刷入成功后按提示重启路由器 使用 Breed 刷入 OpenWrt 进入 breed 控制台 拔掉路由器电源，使路由关机 用取卡针或者其他尖锐物抵住 reset 键，然后插上电源，待路由器后方的网络接口灯闪烁时松开 reset 键即可 然后用一条网线把电脑和路由器的 WAN 口相连，打开浏览器访问 192.168.1.1，即可进入 breed 控制台。 进入后即可开始对路由器进行刷机 刷入 OpenWrt Mac 断网，使用网线连接路由器，打开浏览器访问 192.168.1.1 点击 \"固件更新\" ---> \"常规固件\" ---> 选择下载好的 OpenWrt 固件 - openwrt-18.06.4-ramips-mt76x8-miwifi-nano-squashfs-sysupgrade.bin 等待刷写完成，重启路由器 使用 OpenWrt 路由器 wan 口插上网线，使路由器联网 开启无线 WIFI 功能 LuCI ---> Network ---> Wireless 此时，便可以断开 Mac 和路由器 网线的连接，使用无线网络 OpenWrt 连接进行上网。 安装 LuCI 中文语言包 LuCI ---> System ---> Software ---> Update List LuCI ---> System ---> Software ---> 搜索 luci-i18n-base-zh-cn, 点击安装 刷新 http://192.168.1.1/cgi-bin/luci/，即可看到中文界面 一些常用设置 设置密码 LuCI ---> 系统 ---> 管理权 ---> 主机密码 可以在 LuCI 中设置密码，即路由器 root 用户的密码；也可以在 SSH 中，使用 passwd 命令进行设置 设置时区 LuCI ---> 系统 ---> 系统 ---> 系统属性 ---> 基本设置 更改时区为：Asia/Shanghai 设置默认语言 LuCI ---> 系统 ---> 系统 ---> 系统属性 ---> 语言和界面 更改语言为：中文（Chinese） 设置 NTP 时间同步 LuCI ---> 系统 ---> 系统 ---> 时间同步 使用阿里云NTP服务器，添加阿里云提供的公网 NTP 服务地址：ntp1.aliyun.com、ntp2.aliyun.com ... 更换源 LuCI ---> 系统 ---> 软件包 ---> 配置 添加 # 前缀忽略 发行版软件源，在 自定义软件源 中填入 中科大镜像源 的地址： # add your custom package feeds here # # src/gz example_feed_name http://www.example.com/path/to/files src/gz openwrt_core http://mirrors.ustc.edu.cn/lede/releases/18.06.4/targets/x86/64/packages src/gz openwrt_base http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/base src/gz openwrt_luci http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/luci src/gz openwrt_packages http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/packages src/gz openwrt_routing http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/routing src/gz openwrt_telephony http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/telephony 备份 LuCI ---> 系统 ---> 备份/升级 ---> 刷新操作 ---> 备份 点击 “生成备份”，保存即可 恢复出厂模式 LuCI ---> 系统 ---> 备份/升级 ---> 刷新操作 ---> 恢复 恢复到出厂设置，点击 “执行重置” 即可 注意： 恢复出厂模式后，所做的所有更改都被重置，仅保留自定义软件源（这意味着如果之前有更改路由器默认 IP 的话，我们将不能通过 web 导入备份执行恢复） 修改过路由器 IP，不小心执行恢复出厂模式后，可以重新设置路由器 IP，然后访问 LuCI Web，通过导入备份，重新恢复我们对路由器的设置，但软件包仍然需要我们另行安装 (重新设置路由器 IP：uci set network.lan.ipaddr='192.168.1.1' && uci commit && /etc/init.d/network restart) 恢复配置 LuCI ---> 系统 ---> 备份/升级 ---> 刷新操作 ---> 恢复 恢复配置，选择备份文件，点击 “上传备份” 即可 升级 LuCI ---> 系统 ---> 备份/升级 ---> 刷新操作 ---> 刷写新的固件 选择要升级的固件，点击 “刷写固件” 即可 注意： 使用带有 squashfs 后缀的官方固件升级，之前的相应配置也将得到保留 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/first-use/use-software-source.html":{"url":"mybook/use/first-use/use-software-source.html","title":"关于 OpenWrt 软件源","keywords":"","body":"关于 OpenWrt 软件源 一般而言，通用的软件包都可以在官方源中找到并安装，这一点十分方便，但一些特定的软件包在官方源中并不能找到，这就需要添加自定义软件源使用第三方软件，或者自行编译适合自己硬件的软件包。 官方软件源 官方 发行版软件源 在系统升级后，有可能更改，且国内访问的速度不佳，可以考虑使用 中科大镜像源 进行替换，建议置于 自定义软件源，跟随系统升级。 LuCI ---> 系统 ---> 软件包 ---> 配置 添加 # 前缀忽略 发行版软件源，在 自定义软件源 中填入 中科大镜像源 的地址： src/gz openwrt_core http://mirrors.ustc.edu.cn/lede/releases/18.06.4/targets/x86/64/packages src/gz openwrt_base http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/base src/gz openwrt_luci http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/luci src/gz openwrt_packages http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/packages src/gz openwrt_routing http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/routing src/gz openwrt_telephony http://mirrors.ustc.edu.cn/lede/releases/18.06.4/packages/x86_64/telephony 也可以使用其高速镜像源 openwrt.proxy.ustclug.org 的地址： src/gz openwrt_core http://openwrt.proxy.ustclug.org/releases/18.06.4/targets/x86/64/packages src/gz openwrt_base http://openwrt.proxy.ustclug.org/releases/18.06.4/packages/x86_64/base src/gz openwrt_luci http://openwrt.proxy.ustclug.org/releases/18.06.4/packages/x86_64/luci src/gz openwrt_packages http://openwrt.proxy.ustclug.org/releases/18.06.4/packages/x86_64/packages src/gz openwrt_routing http://openwrt.proxy.ustclug.org/releases/18.06.4/packages/x86_64/routing src/gz openwrt_telephony http://openwrt.proxy.ustclug.org/releases/18.06.4/packages/x86_64/telephony 注意: 是否使用 https 取决于 OpenWrt 是否已经安装 libustream-ssl/tls-* (libustream-cyassl, libustream-mbedtls, libustream-openssl 三选其一), ca-certificates 软件包 效果预览： 官方源： src/gz openwrt_core http://downloads.openwrt.org/releases/18.06.4/targets/x86/64/packages src/gz openwrt_base http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/base src/gz openwrt_luci http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/luci src/gz openwrt_packages http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/packages src/gz openwrt_routing http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/routing src/gz openwrt_telephony http://downloads.openwrt.org/releases/18.06.4/packages/x86_64/telephony 自定义软件源 官方推荐的适用于有外部存储设备的软件包第三方源 http://www.ipkg.be/ http://ipkg.nslu2-linux.org/feeds/optware/ddwrt/cross/stable 国内爱好者组织 openwrt.io 推荐的源 (已接近断更，慎用)： # 极路由 gee ralink opkg 源（j1s、 j2、 j3） 官方源： src/gz barrier_breaker https://upgrade.hiwifi.com/upgrade_file/ralink-HC5661/0.9011.1.9228s/packages src/gz barrier_breaker https://upgrade.hiwifi.com/upgrade_file/ralink-HC5761/0.9012.1.9277s/packages src/gz barrier_breaker https://upgrade.hiwifi.com/upgrade_file/ralink-HC5861/0.9013.1.9653s/packages openwrt.io 源： src/gz openwrtio http://dl.openwrt.io/vendors/gee/ralink/packages # 极路由gee mediatek opkg 源（j1s新版 HC5661A） 官方源： src/gz barrier_breaker https://upgrade.hiwifi.com/upgrade_file/mediatek-HC5661A/0.9011.1.9117s/packages openwrt.io 源： src/gz openwrtio http://dl.openwrt.io/vendors/gee/mediatek/packages # 极路由 gee ar71xx opkg 源（j1） 官方源： src/gz barrier_breaker https://upgrade.hiwifi.com/upgrade_file/ar71xx-HC6361/0.9008.2.8061s/packages openwrt.io 源： src/gz openwrtio http://dl.openwrt.io/vendors/gee/ar71xx/packages # 优酷 youku ramips opkg 源（YK-L1） 官方源： src/gz youku http://desktop.youku.com/openwrt/1.5.0418.50280/2/mtn/packages openwrt.io 源： src/gz openwrtio http://dl.openwrt.io/vendors/youku/ramips/packages aa65535 的个人软件源（for shadowsocks）- OpenWrt-dist # 添加私有软件源公钥 wget http://openwrt-dist.sourceforge.net/openwrt-dist.pub opkg-key add openwrt-dist.pub # 获取路由器架构 (小米路由器青春版) opkg print-architecture | awk '{print $2}' all noarch mipsel_24kc # 设置自定义软件源地址 vi /etc/opkg/customfeeds.conf src/gz openwrt_dist http://openwrt-dist.sourceforge.net/packages/base/mipsel_24kc src/gz openwrt_dist_luci http://openwrt-dist.sourceforge.net/packages/luci # shadowsocks opkg update opkg install shadowsocks-libev opkg install luci-app-shadowsocks ## shadowsocks UDP-Relay (UDP 转发) opkg install iptables-mod-tproxy ## 混淆插件（可选） # opkg install simple-obfs # ChinaDNS opkg install ChinaDNS opkg install luci-app-chinadns # DNS-Forwarder opkg install dns-forwarder opkg install luci-app-dns-forwarder 注意： 不推荐使用不信任的第三方提供的软件包，更多情况下，还是推荐自行编译软件包 个人常用软件包 一些第三方软件包会强依赖硬件平台，通常需要自行编译。以下是个人常用的软件包，仅供参考。 stuarthua/oh-my-openwrt 如需自定义，请参考下节 编译 OpenWrt 固件及软件包 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/use-packages/":{"url":"mybook/use/use-packages/","title":"使用软件包","keywords":"","body":"安装软件（在线/离线) 简单介绍 OpenWrt 的软件安装方式，分为在线安装和离线安装两种方式 在线安装 使用命令行安装 opkg install luci-i18n-base-zh-cn 使用 LuCI 安装 在 LuCI 中搜索 luci-i18n-base-zh-cn, 点击安装即可 离线安装 使用命令行安装 原生 OpenWrt 固件默认没有开启 sftp 服务，需要我们手动安装并开启 opkg update opkg install vsftpd openssh-sftp-server /etc/init.d/vsftpd enable /etc/init.d/vsftpd start Mac 上厌倦了 scp 命令的繁琐，可以使用 Cyberduck 将 luci-i18n-base-zh-cn.ipk 上传至路由器 使用命令行安装 opkg install luci-i18n-base-zh-cn.ipk 使用 LuCI 安装 如果 LuCI 有安装 文件助手 的话，可直接在 LuCI 中安装，详见 移植软件包 - 文件助手 常用命令 更新可用软件包列表 opkg update 升级软件包 opkg upgrade 安装软件包 opkg install # 如 opkg install hiawatha opkg install http://downloads.openwrt.org/snapshots/trunk/ar71xx/packages/hiawatha_7.7-2_ar71xx.ipk opkg install /tmp/hiawatha_7.7-2_ar71xx.ipk 安装软件包时，无视失败的依赖 opkg install --force-depends 移除一个或多个软件包 opkg remove 移除软件包时，无视失败的依赖 opkg remove --force-depends 移除软件包时，移除其所有依赖软件包 opkg remove --force-removal-of-dependent-packages 显示软件包信息 opkg info 列出软件包信息 opkg list 列出已安装软件包 opkg list-installed 列出可升级的软件包列表 opkg list-upgradable 下载软件包到当前目录 opkg download 列出可安装软件包的架构 opkg print-architecture Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/use-packages/use-package-helloworld.html":{"url":"mybook/use/use-packages/use-package-helloworld.html","title":"软件包 (示例) - HelloWorld","keywords":"","body":"使用软件包 (示例) - HelloWorld 安装 离线安装 使用命令行安装 原生 OpenWrt 固件默认没有开启 sftp 服务，需要我们手动安装并开启 opkg update opkg install vsftpd openssh-sftp-server /etc/init.d/vsftpd enable /etc/init.d/vsftpd start 使用 Cyberduck 将 helloworld.ipk 上传至路由器 使用命令行安装 opkg install helloworld.ipk 使用 LuCI 安装 如果 LuCI 有安装 文件助手 的话，可直接在 LuCI 中安装，详见 移植软件包 - 文件助手 在线安装 添加第三方软件源（以个人为例） https://github.com/stuarthua/oh-my-openwrt 使用命令行安装 opkg install helloworld 使用 LuCI 安装 在 LuCI 中搜索 helloworld, 点击安装即可 使用 SSH 连接路由器，输入 helloworld $ root@OpenWrt:~# helloworld hello world! Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/use-packages/use-package-stuart.html":{"url":"mybook/use/use-packages/use-package-stuart.html","title":"软件包 (示例) - 自定义 LuCI 菜单","keywords":"","body":"使用软件包 (示例) - 自定义 LuCI 菜单 使用 OpenWrt, 不可避免的会想要安装一些第三方软件包，对于编译自己的软件包，比较推荐的做法是统一归置到 LuCI 可视化界面的菜单中，方便后续拓展 以个人仓库为例，添加自定义 LuCI 菜单 luci-app-stuart 预览： 获取软件包源码 软件包: luci-app-stuart 源码地址: stuart/luci-app-stuart 使用 SDK 编译软件包 参考: 使用 SDK 编译特定软件包 Mac 上使用 SSH 连接 Ubuntu 更新第三方软件包代码 cd ~/oh-my-openwrt && git pull 更新并安装全部 feeds cd ~/openwrt-sdk-x86 && ./scripts/feeds update -a && ./scripts/feeds install -a 单独更新 feeds - stuart cd ~/openwrt-sdk-x86 && ./scripts/feeds update stuart && ./scripts/feeds install -a -p stuart 进入 ~/openwrt-sdk-x86, 开始编译 cd ~/openwrt-sdk-x86 && make package/luci-app-stuart/compile V=s 在 ~/sdk-ipks/x86 目录查看生成的软件包 x86 ├── luci-app-stuart_1.0-1_all.ipk 生成 ipk 文件 luci-app-stuart_1.0-1_all.ipk 安装及使用 参考: 软件包 (示例) - HelloWorld 原生 OpenWrt 固件默认没有开启 sftp 服务，需要我们手动安装并开启 opkg update opkg install vsftpd openssh-sftp-server /etc/init.d/vsftpd enable /etc/init.d/vsftpd start 使用 Cyberduck 上传 ipk 安装包至路由器 Mac 上使用 SSH 连接路由器，执行安装 opkg install luci-app-stuart_1.0-1_all.ipk 安装后，如果界面没有变化，可以尝试移除 luci 缓存，刷新页面 rm -rf /tmp/luci-* 也可以尝试重启 http 服务，在刷新页面 /etc/init.d/uhttpd restart 如需卸载，执行 opkg remove luci-app-stuart Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/use-packages/use-package-upnp.html":{"url":"mybook/use/use-packages/use-package-upnp.html","title":"使用官方软件包 - 通用即插即用 UPNP","keywords":"","body":"使用官方软件包 - 通用即插即用 UPNP 从官方软件仓库中搜素安装 软件名: luci-app-upnp 语言包: luci-i18n-upnp-zh-cn 命令行安装 opkg install luci-app-upnp luci-i18n-upnp-zh-cn 效果预览： Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/use-packages/use-package-ddns.html":{"url":"mybook/use/use-packages/use-package-ddns.html","title":"使用官方软件包 - 动态 DDNS","keywords":"","body":"使用官方软件包 - 动态 DDNS 从官方软件仓库中搜素安装 软件名: luci-app-ddns 语言包: luci-i18n-ddns-zh-cn 命令行安装 opkg install luci-app-ddns luci-i18n-ddns-zh-cn 效果预览： Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/use-packages/use-package-shadowsocks.html":{"url":"mybook/use/use-packages/use-package-shadowsocks.html","title":"使用第三方软件包 - 科学上网","keywords":"","body":"使用软件包 - 科学上网 阅读 - 路由器 OpenWrt 使用 Shadowsocks 阅读 - 浅谈 DNS 污染/劫持 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/use-lean/use-lean-openwrt.html":{"url":"mybook/use/use-lean/use-lean-openwrt.html","title":"使用恩山论坛 Lean 修改版 OpenWrt","keywords":"","body":"使用恩山论坛 Lean 修改版 OpenWrt Lean 的修改版 OpenWrt 不提供镜像下载，只提供源码，需要手动编译 第一次使用源码编译，耗时较久，成功后，建议进行第二次编译，勾选 Image Builder、SDK, 编译成功后，保存生成的 Image Builder、SDK。 之后需要使用特定软件包时，使用 SDK 生成软件包 ipk，使用 Image Builder 生成固件。 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/use-lean/make-lean-openwrt.html":{"url":"mybook/use/use-lean/make-lean-openwrt.html","title":"编译恩山论坛 Lean 修改版 OpenWrt","keywords":"","body":"使用恩山论坛 Lean 修改版 OpenWrt 源码地址: Github - coolsnowwolf/lede 以下记录使用 lean 源码编译 x86 平台的 OpenWrt 固件的过程，仅供参考 准备 阅读: 在 Mac 上使用 VMware 安装 Ubuntu 14.04 LTS Mac VMware Fusion 11 下载 Lean-OpenWrt 修改版源码 Mac 上 SSH 连接 Ubunut (IP: 192.168.128.140) $ ssh stuart@192.168.128.140 下载源码 $ cd ~ $ git clone https://github.com/coolsnowwolf/lede lean-openwrt 准备编译 更新 Ubuntu $ sudo apt-get update 安装所需的软件库 $ sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint feeds 更新和安装 终端开启代理 - startss, 更新 feeds $ cd ~/lean-openwrt $ ./scripts/feeds update -a # 建议执行多次，成功的话，显示如下 Updating feed 'luci' from 'https://github.com/coolsnowwolf/luci' ... Already up-to-date. Create index file './feeds/luci.index' Updating feed 'packages' from 'https://github.com/coolsnowwolf/packages' ... Already up-to-date. Create index file './feeds/packages.index' Updating feed 'routing' from 'https://git.openwrt.org/feed/routing.git;openwrt-18.06' ... Already up-to-date. Create index file './feeds/routing.index' 安装 feeds $ ./scripts/feeds install -a # 建议执行多次，成功的话，显示如下 Collecting package info: done Installing all packages from feed luci. Installing all packages from feed packages. Installing all packages from feed routing. 编译设置 进行编译设置 $ make menuconfig Target System: x86 Subtarget: x86_64 Target Profile: Generic Target Images: 勾选 squashfs 保存设置 提示： ~/lean-openwrt 目录下隐藏文件 .config 存放的便是 make menuconfig 的设置，删除这个文件，即可恢复默认设置 开始编译 终端开启代理 - startss, 下载编译所需依赖 $ make download V=99 注意： 下载的依赖文件存放在 ~/lean-openwrt/dl 目录，检查该目录，如果有文件小于 1K，可认为下载失败，删除后重新执行 download 编译固件 执行首次编译，生成固件 $ make V=99 编译成功的话，会生成所选 Target 的固件和软件包 编译产物均在 ~/lean-openwrt/bin 目录下可以找到，根据不同的硬件平台类型按文件夹分类 提示： 之后的编译，因为已经完整下载了依赖并生成 toolchain, 速度相对会快一些。 编译特定软件包 以第三方软件包 helloworld 为例 $ make package/helloworld/compile V=99 使用 访问地址： 地址：192.168.1.1 密码：password 查看默认安装的包： $ echo $(opkg list_installed | awk '{ print $1 }') adbyby alsa-lib alsa-utils amd64-microcode ath10k-firmware-qca9888 ath10k-firmware-qca988x ath10k-firmware-qca9984 ath9k-htc-firmware autocore automount autosamba base-files bash bc block-mount bnx2-firmware brcmfmac-firmware-43602a1-pcie busybox ca-certificates coremark coreutils coreutils-base64 coreutils-nohup ddns-scripts ddns-scripts_aliyun default-settings dnsmasq-full dropbear e2fsprogs etherwake ethtool fdisk firewall fstools fwtool hostapd-common htop intel-microcode ip-full ipset iptables iptables-mod-conntrack-extra iptables-mod-fullconenat iptables-mod-ipopt iptables-mod-ipsec iptables-mod-tproxy iw iwinfo jshn jsonfilter kernel kmod-ac97 kmod-asn1-decoder kmod-ath kmod-ath10k kmod-ath5k kmod-ath9k kmod-ath9k-common kmod-ath9k-htc kmod-bnx2 kmod-bonding kmod-button-hotplug kmod-cfg80211 kmod-crypto-acompress kmod-crypto-aead kmod-crypto-authenc kmod-crypto-cbc kmod-crypto-crc32c kmod-crypto-deflate kmod-crypto-des kmod-crypto-ecb kmod-crypto-echainiv kmod-crypto-hash kmod-crypto-hmac kmod-crypto-iv kmod-crypto-manager kmod-crypto-md5 kmod-crypto-null kmod-crypto-pcompress kmod-crypto-rng kmod-crypto-sha1 kmod-crypto-sha256 kmod-crypto-wq kmod-e1000 kmod-e1000e kmod-fs-exfat kmod-fs-ext4 kmod-fs-vfat kmod-fuse kmod-gre kmod-hid kmod-hid-generic kmod-hwmon-core kmod-i2c-algo-bit kmod-i2c-core kmod-i40e kmod-i40evf kmod-ifb kmod-igb kmod-igbvf kmod-input-core kmod-input-evdev kmod-ip6tables kmod-ipsec kmod-ipsec4 kmod-ipsec6 kmod-ipt-conntrack kmod-ipt-conntrack-extra kmod-ipt-core kmod-ipt-fullconenat kmod-ipt-ipopt kmod-ipt-ipsec kmod-ipt-ipset kmod-ipt-nat kmod-ipt-offload kmod-ipt-raw kmod-ipt-tproxy kmod-iptunnel kmod-iptunnel4 kmod-iptunnel6 kmod-ixgbe kmod-lib-crc-ccitt kmod-lib-crc16 kmod-lib-textsearch kmod-lib-zlib-deflate kmod-lib-zlib-inflate kmod-libphy kmod-mac80211 kmod-mdio kmod-mii kmod-mppe kmod-nf-conntrack kmod-nf-conntrack-netlink kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-ipt6 kmod-nf-nat kmod-nf-nathelper kmod-nf-nathelper-extra kmod-nf-reject kmod-nf-reject6 kmod-nfnetlink kmod-nls-base kmod-nls-cp437 kmod-nls-iso8859-1 kmod-nls-utf8 kmod-pcnet32 kmod-phy-realtek kmod-ppp kmod-pppoe kmod-pppox kmod-pps kmod-ptp kmod-r8169 kmod-regmap-core kmod-rt2800-lib kmod-rt2800-usb kmod-rt2x00-lib kmod-rt2x00-usb kmod-sched-cake kmod-sched-core kmod-scsi-core kmod-slhc kmod-sound-core kmod-sound-hda-codec-realtek kmod-sound-hda-codec-via kmod-sound-hda-core kmod-sound-mpu401 kmod-sound-via82xx kmod-tcp-bbr kmod-tulip kmod-tun kmod-usb-audio kmod-usb-core kmod-usb-hid kmod-usb-net kmod-usb-net-asix kmod-usb-net-asix-ax88179 kmod-usb-net-rtl8150 kmod-usb-net-rtl8152 kmod-usb-printer kmod-usb-storage kmod-usb-storage-extras kmod-vmxnet3 libblkid libblobmsg-json libc libcares libcomerr libelf libev libext2fs libf2fs libfdisk libgcc libgmp libip4tc libip6tc libipset libiwinfo libiwinfo-lua libjson-c libjson-script liblua liblucihttp liblucihttp-lua libmbedtls libminiupnpc libmnl libnatpmp libncurses libnl-tiny libopenssl libpcre libpthread libreadline librt libsensors libsmartcols libsodium libss libstdcpp libsysfs libubox libubus libubus-lua libuci libuclient libustream-openssl libuuid libxtables lm-sensors logd lua luci luci-app-accesscontrol luci-app-adbyby-plus luci-app-arpbind luci-app-autoreboot luci-app-ddns luci-app-filetransfer luci-app-firewall luci-app-flowoffload luci-app-ipsec-vpnd luci-app-nlbwmon luci-app-pptp-server luci-app-ramfree luci-app-samba luci-app-sqm luci-app-ssr-plus luci-app-upnp luci-app-usb-printer luci-app-vlmcsd luci-app-vsftpd luci-app-wifischedule luci-app-wol luci-app-xlnetacc luci-app-zerotier luci-base luci-i18n-accesscontrol-zh-cn luci-i18n-adbyby-plus-zh-cn luci-i18n-arpbind-zh-cn luci-i18n-autoreboot-zh-cn luci-i18n-base-zh-cn luci-i18n-ddns-zh-cn luci-i18n-filetransfer-zh-cn luci-i18n-firewall-zh-cn luci-i18n-flowoffload-zh-cn luci-i18n-ipsec-vpnd-zh-cn luci-i18n-nlbwmon-zh-cn luci-i18n-pptp-server-zh-cn luci-i18n-ramfree-zh-cn luci-i18n-samba-zh-cn luci-i18n-upnp-zh-cn luci-i18n-usb-printer-zh-cn luci-i18n-vlmcsd-zh-cn luci-i18n-vsftpd-zh-cn luci-i18n-wifischedule-zh-cn luci-i18n-wol-zh-cn luci-i18n-zerotier-zh-cn luci-lib-fs luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-proto-bonding luci-proto-ppp luci-theme-bootstrap miniupnpd mkf2fs mtd netifd nlbwmon ntfs-3g openssl-util openwrt-keyring opkg p910nd partx-utils pdnsd-alt ppp ppp-mod-pppoe pptpd procd proto-bonding r8169-firmware rpcd rpcd-mod-rrdns rt2800-usb-firmware samba36-server shadowsocks-libev-config shadowsocks-libev-ss-redir shadowsocksr-libev-alt shadowsocksr-libev-server shadowsocksr-libev-ssr-local shellsync sqm-scripts strongswan strongswan-charon strongswan-ipsec strongswan-minimal strongswan-mod-aes strongswan-mod-gmp strongswan-mod-hmac strongswan-mod-kernel-netlink strongswan-mod-nonce strongswan-mod-pubkey strongswan-mod-random strongswan-mod-sha1 strongswan-mod-socket-default strongswan-mod-stroke strongswan-mod-updown strongswan-mod-x509 strongswan-mod-xauth-generic strongswan-mod-xcbc sysfsutils tc terminfo ubox ubus ubusd uci uclient-fetch uhttpd uhttpd-mod-ubus usign v2ray vlmcsd vsftpd-alt wget wifischedule wireless-regdb wpad zerotier zlib 后续 如果想要对固件进行修改，可以考虑编译时，选中生成 Image Builder 和 SDK，之后使用 SDK 编译特定软件包，使用 Image Builder 生成完整固件。 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/use-lean/use-lean-openwrt-package.html":{"url":"mybook/use/use-lean/use-lean-openwrt-package.html","title":"使用恩山论坛 Lean 修改版 OpenWrt 软件包","keywords":"","body":"使用恩山论坛 Lean 修改版 OpenWrt 软件包 以下列出恩山论坛 Lean 修改版 OpenWrt 的一些软件包，更多详情可见 恩山论坛: OpenWrt 编译 LuCI -> Applications 添加插件应用说明 软件包 Package 软件名 描述 luci-app-accesscontrol 访问时间控制 luci-app-adbyby-plus 广告屏蔽大师Plus http://www.adbyby.com/ kysdm/adbyby luci-app-amule aMule 开源免费的 P2P 文件共享软件 luci-app-arpbind IP/MAC 绑定 luci-app-autoreboot 定时重启 luci-app-dnsforwarder DNSForwarder 防 DNS 污染 luci-app-dnspod DNSPod luci-app-familycloud 家庭云盘 luci-app-filetransfer 文件传输 luci-app-flowoffload Turbo ACC FLOW转发加速 (集成在 sfe) luci-app-frpc 内网穿透 Frp luci-app-guest-wifi 访客网络 luci-app-haproxy-tcp TCP 负载均衡 luci-app-ipsec-vpnd IPSec VPN 服务器 luci-app-kodexplorer 可道云 luci-app-mwan3helper MWAN3 分流助手 luci-app-n2n_v2 N2N 内网穿透 luci-app-nft-qos QOS 流控 Nftables版 已弃 luci-app-openvpn-server OpenVPN Server luci-app-pppoe-relay PPPoE NAT穿透 luci-app-pptp-server PPTP VPN luci-app-qbittorrent BT 下载工具 luci-app-ramfree 释放内存 luci-app-samba4 Samba 文件服务器 luci-app-sfe Turbo ACC 网络加速 (开启 Fast Path 转发加速) 恩山 - Turbo ACC 加速引擎技术，多重加速你的上网体验 luci-app-ssr-plus SSR Plus luci-app-ssrserver-python Shadowsocks Server (Python) luci-app-syncdial 多拨虚拟网卡 (原 macvlan) luci-app-ttyd 网页终端命令行 luci-app-unblockmusic 解锁网易云灰色歌曲 luci-app-usb-printer USB Printer 打印服务器 luci-app-v2ray-server V2ray Server luci-app-vlmcsd KMS 服务器 luci-app-vsftpd FTP 服务器 luci-app-webadmin Web 管理页面设置 luci-app-wrtbwmon 实时流量监测 luci-app-xlnetacc 迅雷快鸟 luci-app-zerotier ZeroTier 内网穿透 luci-proto-bonding 网络支持链路聚合 802.3ad luci-theme-argon argon 主题 LuCI luci-theme-netgear netgear 主题 LuCI 第三方 Package 描述 说明 block-mount 启动时 USB 自动挂载 coremark 测试处理器核心性能 wget Linux 命令：下载 libustream-openssl SSL 支持 ca-certificates SSL 证书颁发机构 default-settings 默认设置 fdisk Linux 命令：磁盘分区 lsblk Linux 命令：列出所有可用块设备的信息 mdadm Linux 命令：管理和监视软件RAID设备 automount 自动挂载服务 autosamba 自动挂载 samba dnsmasq 提供 DNS 缓存和 DHCP 服务 dnsmasq-full 支持 ipset 的 dnsmasq，适合国内 https://www.ixsh.com/tag/dnsmasq-full/ iptables IPv4 防火墙 ip6tables IPv6 防火墙 ppp、ppp-mod-pppoe pppoe 拨号 odhcp6c DHCPv6 客户端 https://openwrt.org/docs/techref/odhcp6c odhcpd-ipv6only 为IP配置客户端和下游路由器提供IP服务和中继服务 https://openwrt.org/packages/pkgdata/odhcpd-ipv6only partx-utils Linux 工具：磁盘管理 mkf2fs Linux 工具：磁盘格式化 e2fsprogs Linux 工具：维护 ext2，ext3 和 ext4 文件系统 wpad 让浏览器自动发现代理服务器 https://www.ibm.com/developerworks/cn/linux/1309_quwei_wpad/index.html htop Linux 命令：查看进程及其命令 https://openwrt.org/packages/pkgdata/htop lm-sensors 读取硬件传感器数据 https://openwrt.org/packages/pkgdata/lm-sensors autocore automount autosamba Lean 自定义程序 ath10k-firmware-qca988x 适用于QCA988x器件的ath10k固件 https://openwrt.org/packages/pkgdata/ath10k-firmware-qca988x-ct ath10k-firmware-qca9888 适用于QCA9888器件的ath10k固件 https://openwrt.org/packages/pkgdata/ath10k-firmware-qca9888 ath10k-firmware-qca9984 适用于QCA9884器件的ath10k固件 https://openwrt.org/packages/pkgdata/ath10k-firmware-qca9984 brcmfmac-firmware-43602a1-pcie Broadcom 43602a1 FullMAC PCIe固件 https://openwrt.org/packages/pkgdata/brcmfmac-firmware-43602a1-pcie intel-microcode Intel x86 CPU 微指令 https://openwrt.org/packages/pkgdata/intel-microcode amd64-microcode AMD64 CPU 微指令 https://openwrt.org/packages/pkgdata/amd64-microcode alsa-utils ALSA（高级Linux声音架构）工具 https://openwrt.org/packages/pkgdata/alsa-utils shadowsocks-libev-ss-redir v2ray shadowsocksr-libev-server shadowsocksr-libev-ssr-local 科学上网 三合一版 内核 Package 描述 说明 kmod-nf-nathelper NAT 以及防火墙，包含 FTP https://openwrt.org/packages/pkgdata/kmod-nf-nathelper kmod-nf-nathelper-extra NAT 以及防火墙拓展，包含 PPTP、广播等 https://openwrt.org/packages/pkgdata/kmod-nf-nathelper-extra kmod-ipt-raw IPv4 原始表支持 https://openwrt.org/packages/pkgdata/kmod-ipt-raw kmod-ipt-raw6 IPv6 原始表支持 https://openwrt.org/packages/pkgdata/kmod-ipt-raw6 kmod-tcp-bbr tcp bbr 加速 官网最新版查询没有，但在一些其他版本分支上存在 kmod-ipt-offload NAT 加速 https://openwrt.org/packages/pkgdata/kmod-ipt-offload kmod-usb-hid 内核支持 USB HID 设备，如键盘和鼠标 https://openwrt.org/packages/pkgdata/kmod-usb-hid kmod-ath5k 高通 Atheros 5xxx 芯片组的无线适配器支持 https://openwrt.org/packages/pkgdata/kmod-ath5k kmod-ath9k 高通 Atheros IEEE 802.11n AR5008和AR9001 系列芯片组的无线适配器支持 https://openwrt.org/packages/pkgdata/kmod-ath9k kmod-ath9k-htc 高通 Atheros USB AR9271 和 AR7010 系列芯片组的无线适配器支持 https://openwrt.org/packages/pkgdata/kmod-ath9k-htc kmod-ath10k 高通 Atheros IEEE 802.11ac 系列芯片组的无线适配器的支持，目前仅支持 PCI https://openwrt.org/packages/pkgdata/kmod-ath10k kmod-rt2800-usb RT2x00 卡的 Ralink 驱动程序（RT2870 USB） https://openwrt.org/packages/pkgdata/kmod-rt2800-usb kmod-e1000e 用于英特尔（R）PRO / 1000 PCIe 以太网适配器的内核模块 https://openwrt.org/packages/pkgdata/kmod-e1000e kmod-igb 用于英特尔（R）82575/82576 PCI-Express 千兆以太网适配器的内核模块 https://openwrt.org/packages/pkgdata/kmod-igb kmod-igbvf 用于英特尔（R）82576 虚拟功能以太网适配器的内核模块 https://openwrt.org/packages/pkgdata/kmod-igbvf kmod-ixgbe 用于英特尔（R）82598/82599 PCI-Express 10千兆位以太网适配器的内核模块 https://openwrt.org/packages/pkgdata/kmod-ixgbe kmod-pcnet32 AMD PCnet32 以太网适配器的内核模块 https://openwrt.org/packages/pkgdata/kmod-pcnet32 kmod-tulip Tulip系列网卡的内核模块， 包括DECchip Tulip，DIGITAL EtherWORKS，Winbond W89c840， Davicom DM910x / DM980x和ULi M526x控制器支持 https://openwrt.org/packages/pkgdata/kmod-tulip kmod-vmxnet3 适用于VMware VMXNET3以太网适配器的内核模块 https://openwrt.org/packages/pkgdata/kmod-vmxnet3 kmod-i40e kmod-i40evf Intel i40e i40evf 驱动程序 官方没有收录，Lean 仓库中有收录 kmod-ac97 ac97 控制器 https://openwrt.org/packages/pkgdata/kmod-ac97 kmod-sound-hda-core 用于HD Audio声音支持的内核模块 https://openwrt.org/packages/pkgdata/kmod-sound-hda-core kmod-sound-hda-codec-realtek 用于Intel HDA Realtek编解码器支持的内核模块 https://openwrt.org/packages/pkgdata/kmod-sound-hda-codec-realtek kmod-sound-hda-codec-via 用于HD Audio VIA编解码器支持的内核模块 https://openwrt.org/packages/pkgdata/kmod-sound-hda-codec-via kmod-sound-via82xx 支持主板上集成的AC97声音设备 使用威盛芯片组 https://openwrt.org/packages/pkgdata/kmod-sound-via82xx kmod-usb-audio 内核支持USB音频设备 https://openwrt.org/packages/pkgdata/kmod-usb-audio kmod-usb-net 用于USB转以太网转换器的内核模块 https://openwrt.org/packages/pkgdata/kmod-usb-net kmod-usb-net-asix 用于USB转以太网Asix转换器的内核模块 https://openwrt.org/packages/pkgdata/kmod-usb-net-asix kmod-usb-net-asix-ax88179 用于USB转以太网ASIX AX88179的USB 3.0 / 2.0内核模块 千兆以太网适配器 https://openwrt.org/packages/pkgdata/kmod-usb-net-asix-ax88179 kmod-usb-net-rtl8150 用于USB到以太网的Realtek 8150转换器的内核模块 https://openwrt.org/packages/pkgdata/kmod-usb-net-rtl8150 kmod-usb-net-rtl8152 用于USB到以太网的内核模块Realtek 8152 USB2.0 / 3.0转换器 https://openwrt.org/packages/pkgdata/kmod-usb-net-rtl8152 关于内核软件包的更多信息可在官网中查到：https://openwrt.org/packages/table/start Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/use/use-koolshare/use-koolshare-openwrt.html":{"url":"mybook/use/use-koolshare/use-koolshare-openwrt.html","title":"使用 KoolShare 修改版 OpenWrt","keywords":"","body":"使用 KoolShare 修改版 OpenWrt 尚未更新 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/":{"url":"mybook/make/","title":"编译 OpenWrt","keywords":"","body":"编译 OpenWrt Lean 修改版 OpenWrt 自定义了很多内容，为的是适配绝大多数硬件。希望使用适合自己硬件的 OpenWrt，可以考虑使用官方 OpenWrt 镜像或源码进行定制 OpenWrt 固件的编译。 本章主要介绍如何编译 OpenWrt 及其软件包 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/make-openwrt.html":{"url":"mybook/make/make-openwrt.html","title":"编译 OpenWrt 固件及软件包","keywords":"","body":"编译 OpenWrt 固件及软件包 编译 OpenWrt 有多种方式： 使用 Image Builder 组装固件镜像 使用 OpenWrt SDK 编译软件包 使用 OpenWrt 源码编译固件及软件包 相对来讲 Image Builder 更适合于低内存设备，此类设备 okpg 可能无法很好的运行，如 小米路由器青春版； 使用 SDK 编译能大大减少时间和出错，因为 SDK 中已经包含了所需的环境 使用源码编译当然是最好的，前提是对 OpenWrt 足够熟悉，并能熟练掌握配置技巧。通常，为了减少时间，更推荐使用 SDK 编译 从 OpenWrt 源码编译时，勾选 image builder 和 sdk 这两项之后，可以在编译产物中找到对应硬件的 image builder 和 sdk, 所以，从源码编译是一种适用面很广的编译方式。但使用源码编译，因为要重新编译 cross-compile toolchians，下载内核和软件包的源码，导致这个过程比较耗时，更多时候，还是推荐使用 SDK 编译 ipk，使用 Image Builder 编译固件，可以节省很多时间。 注意： 区分编译固件、编译软件包 准备 Mac VMware Fusion 11 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/make-by-source.html":{"url":"mybook/make/make-by-source.html","title":"使用源码编译固件及软件包","keywords":"","body":"使用源码编译固件及软件包 使用源码编译，可以设置生成 image builder 和 sdk，也可以编译完整镜像，或者单独编译 ipk，这是适合范围最广的编译方式，即便这有些耗时。 准备 Ubuntu 14.04 LTS - 参考上文 在 Mac 上使用 VMware 安装 Ubuntu 14.04 LTS 下载源码 Mac 使用 SSH 连接 Ubuntu (IP: 192.168.128.140) $ ssh stuart@192.168.128.140 终端开启代理 - startss, 下载 OpenWrt 源码: $ cd ~ $ git clone https://github.com/openwrt/openwrt.git # openwrt 切换至 Release v18.06.4 $ cd openwrt $ git checkout -b test v18.06.4 准备编译 更新 Ubuntu $ sudo apt-get update 安装所需的软件库 $ sudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint 添加第三方软件包代码 添加第三方软件包（以个人为例） 本地方式添加 本地下载第三方软件包 $ cd ~ $ git clone https://github.com/stuarthua/oh-my-openwrt 进入 OpenWrt，添加自定义 feeds, 编辑 feeds.conf.default src-link stuart /home/stuart/oh-my-openwrt/stuart 或者直接拷贝源码至 ~/openwrt/package (不推荐，因为这有可能需要频繁拷贝，较为繁琐) $ cp -rf ~/oh-my-openwrt/stuart ~/openwrt/package/stuart 远程方式添加 进入 OpenWrt，添加自定义 feeds, 编辑 feeds.conf.default src-git stuart https://github.com/stuarthua/oh-my-openwrt feeds 更新和安装 终端开启代理 - startss, 更新 feeds $ cd openwrt $ ./scripts/feeds update -a # 建议执行多次，成功的话，显示如下 Updating feed 'packages' from 'https://git.openwrt.org/feed/packages.git^5779614d267732fc382c1684202543fdbd924b4c' ... Create index file './feeds/packages.index' Updating feed 'luci' from 'https://git.openwrt.org/project/luci.git^4d6d8bc5b0d7ee71c7b29b12e7e0c2e1e86cb268' ... Create index file './feeds/luci.index' Updating feed 'routing' from 'https://git.openwrt.org/feed/routing.git^bb156bf355b54236a52279522fabbec1e8dd7043' ... Create index file './feeds/routing.index' Updating feed 'telephony' from 'https://git.openwrt.org/feed/telephony.git^507eabe1b60458ceb1a535aec9d12c8be95706f0' ... Create index file './feeds/telephony.index' Updating feed 'stuart' from 'https://github.com/stuarthua/oh-my-openwrt' ... Already up-to-date. Create index file './feeds/stuart.index' 安装 feeds $ ./scripts/feeds install -a # 建议执行多次，成功的话，显示如下 Collecting package info: done Installing all packages from feed packages. Installing all packages from feed luci. Installing all packages from feed routing. Installing all packages from feed telephony. Installing all packages from feed stuart. 编译设置 进行编译设置 $ make menuconfig 小米路由器青春版 Target System: MediaTed Ralink MIPS Subtarget: MT78x8 based boards Target Profile: Xiaomi MiWiFi Nano Target Images: 勾选 squashfs x86 Target System: x86 Subtarget: x86_64 Target Profile: Generic Target Images: 勾选 squashfs 保存设置 提示： openwrt 目录下隐藏文件 .config 存放的便是 make menuconfig 的设置，删除这个文件，即可恢复默认设置 开始编译 终端开启代理 - startss, 下载编译所需依赖 $ make download V=99 编译固件 执行首次编译，生成固件 $ make V=99 编译成功的话，会生成所选 Target 的固件和软件包 编译产物均在 openwrt/bin 目录下可以找到，根据不同的硬件平台类型按文件夹分类 提示： 之后的编译，因为已经完整下载了依赖并生成 toolchain, 速度相对会快一些。 编译特定软件包 以第三方软件包 helloworld 为例 $ make package/helloworld/compile V=99 常用指令 更多指令，详见 官方 - 编译说明, Build system – Usage, 也可参考 openwrt 编译 helloword.ipk，中文讲解的更细致一些。 make clean 删除 bin 和 build_dir目录 make dirclean 删除 bin 和 build_dir 目录，同时删除 staging_dir 和 toolchain 目录，基本的全面清理 make distclean 删除编译产物以及配置的所有内容，并删除所有下载的 feeds，完全的全面清理 make download 下载所需依赖，可以添加 V=s 查看详情 make defconfig 即 “默认配置”，在启用默认配置以前先选择目标平台 Target。 执行这个命令，将会生成一个通用的编译系统配置，这个配置包含了一个对于编译环境的先决条件和依赖的检查，同时会安装缺失的组件并再次运行。 make prereq 自动配置依赖关系，通常在执行完 make defconfig, 生成默认配置后执行此命令 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/make-by-sdk.html":{"url":"mybook/make/make-by-sdk.html","title":"使用 SDK 编译特定软件包","keywords":"","body":"使用 SDK 编译特定软件包 不同于 Image Builder 生成完整固件，使用 SDK 方式编译，可以帮助我们编译特定软件包，生成 ipk 文件，在适合的设备上进行离线/在线安装。 OpenWrt 官方也推荐使用 SDK 方式编译 ipk，而不是使用源码，这能节省我们大量的时间。 以 小米路由器青春版 为例 闪存 - 16M 内存 - 64M 以下记录编译 helloworld (源码 - stuarthua/oh-my-openwrt) 的过程，仅供参考。 准备 阅读：在 Mac 上使用 VMware 安装 Ubuntu 14.04 LTS 阅读：小米路由器青春版使用官方 OpenWrt 硬件：小米路由器青春版 下载 SDK 简单介绍下 Openwrt 的交叉编译，可以简单理解为在一个平台上生成另一个平台上的可执行文件，如使用电脑(x86_64平台)编译出路由器(mips-AR71XX)上可以执行的二进制文件，要进行交叉编译首先就要有对应平台的编译器。 在 OpenWrt 中，toolchain 便扮演着这一角色，OpenWrt 的 SDK 中，包含着 toolchain 这一工具。 下载适合自己无线路由器的 SDK, 从 http://downloads.openwrt.org/ 选择适合自己的目录 小米路由器青春版硬件与小米路由器 mini 基本一致，只是缺少 usb 模块，编译时，取消 usb 相关 package 即可。 架构：ramips 芯片型号：mt76x8 版本：Release 18.06.4 OpenWrt Xiaomi Nano：https://openwrt.org/toh/xiaomi/nano mt76x8 SDK 下载地址：openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64.tar.xz Mac 上使用 SSH 连接 Ubuntu (IP: 192.168.128.140) $ ssh stuart@192.168.128.140 下载并解压 SDK 包 $ cd ~ $ wget https://downloads.openwrt.org/releases/18.06.4/targets/ramips/mt76x8/openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64.tar.xz $ tar -xvf openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64.tar.xz 得到 openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64 目录，重命名为 openwrt-sdk-xiaomi $ cd ~ $ mv openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64 openwrt-sdk-xiaomi $ rm -rf openwrt-sdk-18.06.2-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64.tar.xz openwrt-sdk-xiaomi 目录便是我们需要的 OpenWrt SDK 使用 SDK OpenWrt SDK 生成 ipk 包时，只需要一个 Makefile 文件, Makefile 里记录了所需下载的文件、生成规则、软件版本、类型等。具体详见 官网 wiki - Creating packages，也可以参考 OpenWRT开发之 - 研究包的 Makefile 便于理解。 我们来看一个文件 feeds.conf.default, 这将对我们的编译有所启发 src-git base https://git.openwrt.org/openwrt/openwrt.git;v18.06.2 src-git packages https://git.openwrt.org/feed/packages.git^911bbd6bb4856f1e28ae00af37df62e4fa3529e5 src-git luci https://git.openwrt.org/project/luci.git^6f6641d97de2c85ee5d87beda92ae8437d1dbdf5 src-git routing https://git.openwrt.org/feed/routing.git^ea345d16a6e27c2a8fdf67bf543cc36a5f189131 src-git telephony https://git.openwrt.org/feed/telephony.git^cb939d9677d6e38c428f9f297641d07611edeb04 查阅 官网 - OpenWrt Feeds，我们可以方便的定义 feed 链接到本地文件 添加软件包源码 本地方式添加 $ cd ~ $ git clone https://github.com/stuarthua/oh-my-openwrt 编辑 ~/openwrt-sdk-xiaomi/feeds.conf.default, 添加自定义 src-link src-link stuart /home/stuart/oh-my-openwrt/stuart 或者直接拷贝源码至 ~/openwrt-sdk-xiaomi/package (不推荐，因为这有可能需要频繁拷贝，较为繁琐) $ cp -rf ~/oh-my-openwrt/stuart ~/openwrt-sdk-xiaomi/package/stuart 远程仓库方式添加 编辑 ~/openwrt-sdk-xiaomi/feeds.conf.default, 添加自定义 src-git src-git stuart https://github.com/stuarthua/oh-my-openwrt feeds 更新依赖并下载 终端开启代理 更新 feeds 依赖 $ ./scripts/feeds update -a # 建议多次执行，成功的话，提示如下 Updating feed 'base' from 'https://git.openwrt.org/openwrt/openwrt.git;v18.06.4' ... Already up-to-date. Create index file './feeds/base.index' Updating feed 'packages' from 'https://git.openwrt.org/feed/packages.git^5779614d267732fc382c1684202543fdbd924b4c' ... Create index file './feeds/packages.index' Updating feed 'luci' from 'https://git.openwrt.org/project/luci.git^4d6d8bc5b0d7ee71c7b29b12e7e0c2e1e86cb268' ... Create index file './feeds/luci.index' Updating feed 'routing' from 'https://git.openwrt.org/feed/routing.git^bb156bf355b54236a52279522fabbec1e8dd7043' ... Create index file './feeds/routing.index' Updating feed 'telephony' from 'https://git.openwrt.org/feed/telephony.git^507eabe1b60458ceb1a535aec9d12c8be95706f0' ... Create index file './feeds/telephony.index' Updating feed 'stuart' from '~/oh-my-openwrt' ... Create index file './feeds/stuart.index' 下载 feeds 依赖 $ ./scripts/feeds install -a # 建议多次执行，成功的话，提示如下 Collecting package info: done Installing all packages from feed base. Installing all packages from feed packages. Installing all packages from feed luci. Installing all packages from feed routing. Installing all packages from feed telephony. Installing all packages from feed stuart. 开始编译 阅读: 官方 - 编译固件 以 HelloWorld 为例，执行编译 $ make package/helloworld/compile V=s 编译成功的话，在 /home/stuart/openwrt-sdk-xiaomi/bin/packages/mipsel_24kc/base/ 目录可以找到 ipk 文件 helloworld_1_mipsel_24kc.ipk ipk 文件路径过深，为便于查看，可以在用户根目录建立软连接 $ mkdir -p ~/sdk-ipks $ ln -s /home/stuart/openwrt-sdk-xiaomi/bin/packages/mipsel_24kc/base /home/stuart/sdk-ipks/xiaomi 将 ipk 离线安装到路由器或使用 Image Builder 打包进固件，便可以使用 以 helloworld 为例，SSH 连接路由器，输入 helloworld $ root@OpenWrt:~# helloworld hello world! Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/make-by-image-builder.html":{"url":"mybook/make/make-by-image-builder.html","title":"使用 Image Builder 组装镜像固件","keywords":"","body":"使用 Image Builder 组装固件镜像 Image Builder 是 Openwrt 官方提供的用来快捷生成所需固件的工具包，这个工具包已经包含并配置好了所有编译需要的程序，一条命令即可生成所需的固件，并且可以通过修改 Makefile 和一些配置文件来生成自定义的固件，是相对简洁易用的方式。 如果你的设备同样存在闪存小，无法使用 opkg 安装软件的问题，可以尝试使用 Image Builder 定制自己的固件，将需要的软件定制编译到固件中，以固件升级的方式安装特定软件。 以 小米路由器青春版 为例 闪存 - 16M 内存 - 64M 准备 阅读：在 Mac 上使用 VMware 安装 Ubuntu 14.04 LTS 阅读：小米路由器青春版使用官方 OpenWrt 硬件：小米路由器青春版 下载 Image Builder 下载适合自己无线路由器的 Image Builder, 从 http://downloads.openwrt.org/ 选择适合自己的目录 小米路由器青春版硬件与小米路由器 mini 基本一致，只是缺少 usb 模块，编译时，取消 usb 相关 package 即可。 架构：ramips 芯片型号：mt76x8 版本：Release 18.06.4 OpenWrt Xiaomi Nano：https://openwrt.org/toh/xiaomi/nano mt76x8 Image Builder 下载地址：openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz Mac 上使用 SSH 连接 Ubuntu (IP: 192.168.128.140) $ ssh stuart@192.168.128.140 下载并解压 Image Builder 包 $ wget http://downloads.openwrt.org/releases/18.06.4/targets/ramips/mt76x8/openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz $ tar -xvf openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz 得到 openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64 目录，重命名为 openwrt-imagebuilder-xiaomi $ mv openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64 openwrt-imagebuilder-xiaomi $ rm -rf openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz openwrt-imagebuilder-xiaomi 目录包含并配置好了所有适用于编译小米路由器青春版固件需要的程序 使用 Image Builder 官方 Image Builder 使用指引 Image Builder 编译命令示例： make image PROFILE=XXX PACKAGES=\"pkg1 pk2 -pkg3 -pkg4\" FILES=files/ 共有三个要传递的参数：PROFILE PACKAGES FILES: PROFILE 指定设备类型，即预定义的 Profile，对应路由器型号 PACKAGES 指定需要编译进固件中的包，不填写的话只包含预定义需要的最少的包，如果前面以 - 符号开头的表示不不含这个包 FILES 指定要编译进固件的自定义文件，如网络有关配置文件、自定义包。 其他参数 (非必要参数，了解即可)： BIN_DIR - 自定义固件输出目录 EXTRA_IMAGE_NAME - 固件文件名拓展 DISABLED_SERVICES - 应禁用/etc/init.d/中的哪些服务。使用在/etc/init.d中找到的initscript名称，例如 dnsmasq 的“dhcp” 查看当前芯片固件的默认软件包和硬件支持列表 $ cd openwrt-imagebuilder-xiaomi $ make info 显示如下： 点击展开详情 stuart@ubuntu:~/openwrt-imagebuilder-xiaomi$ make info Current Target: \"ramips (MT76x8 based boards)\" Default Packages: base-files libc libgcc busybox dropbear mtd uci opkg netifd fstools uclient-fetch logd kmod-leds-gpio kmod-gpio-button-hotplug swconfig kmod-mt76 wpad-mini dnsmasq iptables ip6tables ppp ppp-mod-pppoe firewall odhcpd-ipv6only odhcp6c kmod-ipt-offload Available Profiles: Default: Default Profile Packages: kmod-usb-core kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport iwinfo alfa-network_awusfree1: ALFA Network AWUSFREE1 Packages: uboot-envtools wcr-1166ds: Buffalo WCR-1166DS Packages: duzun-dm06: DuZun DM06 Packages: kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport gl-mt300n-v2: GL-iNet GL-MT300N-V2 Packages: kmod-usb2 kmod-usb-ohci hc5661a: HiWiFi HC5661A Packages: LinkIt7688: MediaTek LinkIt Smart 7688 Packages: kmod-usb2 kmod-usb-ohci uboot-envtools mt7628: MediaTek MT7628 EVB Packages: kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport mac1200r-v2: Mercury MAC1200R v2.0 Packages: omega2: Onion Omega2 Packages: kmod-usb2 kmod-usb-ohci uboot-envtools omega2p: Onion Omega2+ Packages: kmod-usb2 kmod-usb-ohci uboot-envtools kmod-sdhci-mt7620 pbr-d1: PBR-D1 Packages: kmod-usb2 kmod-usb-ohci tplink_c20-v4: TP-Link ArcherC20 v4 Packages: tplink_c50-v3: TP-Link ArcherC50 v3 Packages: tplink_tl-mr3420-v5: TP-Link TL-MR3420 v5 Packages: kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport tl-wr840n-v4: TP-Link TL-WR840N v4 Packages: tl-wr840n-v5: TP-Link TL-WR840N v5 Packages: tl-wr841n-v13: TP-Link TL-WR841N v13 Packages: tplink_tl-wr842n-v5: TP-Link TL-WR842N v5 Packages: kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport tplink_tl-wr902ac-v3: TP-Link TL-WR902AC v3 Packages: kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport tama_w06: Tama W06 Packages: kmod-usb2 kmod-usb-ohci u7628-01-128M-16M: UniElec U7628-01 (128M RAM/16M flash) Packages: kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport vocore2: VoCore VoCore2 Packages: kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport kmod-sdhci-mt7620 vocore2lite: VoCore VoCore2-Lite Packages: kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport kmod-sdhci-mt7620 wrtnode2p: WRTnode 2P Packages: kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport wrtnode2r: WRTnode 2R Packages: kmod-usb2 kmod-usb-ohci wl-wn575a3: Wavlink WL-WN575A3 Packages: widora_neo-16m: Widora-NEO (16M) Packages: kmod-usb2 kmod-usb-ohci widora_neo-32m: Widora-NEO (32M) Packages: kmod-usb2 kmod-usb-ohci miwifi-nano: Xiaomi MiWiFi Nano Packages: kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport zbtlink_zbt-we1226: ZBTlink ZBT-WE1226 Packages: 提取有用信息，以小米路由器青春版为例 Default Packages: base-files libc libgcc busybox dropbear mtd uci opkg netifd fstools uclient-fetch logd kmod-leds-gpio kmod-gpio-button-hotplug swconfig kmod-mt76 wpad-mini dnsmasq iptables ip6tables ppp ppp-mod-pppoe firewall odhcpd-ipv6only odhcp6c kmod-ipt-offload Available Profiles: Default: Default Profile Packages: kmod-usb-core kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport iwinfo miwifi-nano: Xiaomi MiWiFi Nano Packages: kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport 确定 小米路由器青春版 PROFILE Default Packages (默认安装的包): base-files libc libgcc busybox dropbear mtd uci opkg netifd fstools uclient-fetch logd kmod-leds-gpio kmod-gpio-button-hotplug swconfig kmod-mt76 wpad-mini dnsmasq iptables ip6tables ppp ppp-mod-pppoe firewall odhcpd-ipv6only odhcp6c kmod-ipt-offload Default Profile Packages (所有型号路由器共用包): kmod-usb-core kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport iwinfo Xiaomi MiWiFi Nano Profile: miwifi-nano Xiaomi MiWiFi Nano Packages (专属包): kmod-usb2 kmod-usb-ohci kmod-usb-ledtrig-usbport 现在，我们可以确定 PROFILE=miwifi-nano，但 PACKAGES 的确定需要一些考量 确定 小米路由器青春版 PACKAGES 首先，我们来获取官方固件中包含的软件包文件列表 SSH 连接安装官方固件的小米路由器青春版，恢复出厂设置并重启 (是的，为了这个配置，我们需要折腾设备了) $ firstboot $ reboot 路由器重启完成后，重新 SSH 连接路由器，查看一下官方固件默认安装的软件包 $ echo $(opkg list_installed | awk '{ print $1 }') base-files busybox dnsmasq dropbear firewall fstools fwtool hostapd-common ip6tables iptables iw iwinfo jshn jsonfilter kernel kmod-cfg80211 kmod-gpio-button-hotplug kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-offload kmod-leds-gpio kmod-lib-crc-ccitt kmod-mac80211 kmod-mt76 kmod-mt76-core kmod-mt7603 kmod-mt76x02-common kmod-mt76x2 kmod-mt76x2-common kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-ipt6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-nls-base kmod-ppp kmod-pppoe kmod-pppox kmod-slhc kmod-usb-core kmod-usb-ehci kmod-usb-ledtrig-usbport kmod-usb-ohci kmod-usb2 libblobmsg-json libc libgcc libip4tc libip6tc libiwinfo libiwinfo-lua libjson-c libjson-script liblua liblucihttp liblucihttp-lua libnl-tiny libpthread libubox libubus libubus-lua libuci libuclient libxtables logd lua luci luci-app-firewall luci-base luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-proto-ipv6 luci-proto-ppp luci-theme-bootstrap mtd netifd odhcp6c odhcpd-ipv6only openwrt-keyring opkg ppp ppp-mod-pppoe procd rpcd rpcd-mod-rrdns swconfig ubox ubus ubusd uci uclient-fetch uhttpd usign wireless-regdb wpad-mini 可以看出，与 make info 得到的 Default Packages 相比，软件包多了不少，其中包含了 luci luci-app-firewall 等必要的软件包 提示： 查询官方软件包信息的地址：https://openwrt.org/packages/table/start 可以对照包名查询其功能描述 小米路由器青春版没有 usb 模块，可以移除 usb 相关的包 -kmod-usb-core -kmod-usb2 -kmod-usb-ohci -kmod-usb-ledtrig-usbport LuCI Web 一般会想要安装中文界面 luci-i18n-base-zh-cn 最终，我们可以确定 PACKAGES PACKAGES=\"base-files busybox dnsmasq dropbear firewall fstools fwtool hostapd-common ip6tables iptables iw iwinfo jshn jsonfilter kernel kmod-cfg80211 kmod-gpio-button-hotplug kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-offload kmod-leds-gpio kmod-lib-crc-ccitt kmod-mac80211 kmod-mt76 kmod-mt76-core kmod-mt7603 kmod-mt76x02-common kmod-mt76x2 kmod-mt76x2-common kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-ipt6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-nls-base kmod-ppp kmod-pppoe kmod-pppox kmod-slhc libblobmsg-json libc libgcc libip4tc libip6tc libiwinfo libiwinfo-lua libjson-c libjson-script liblua liblucihttp liblucihttp-lua libnl-tiny libpthread libubox libubus libubus-lua libuci libuclient libxtables logd lua luci luci-app-firewall luci-base luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-proto-ipv6 luci-proto-ppp luci-theme-bootstrap mtd netifd odhcp6c odhcpd-ipv6only openwrt-keyring opkg ppp ppp-mod-pppoe procd rpcd rpcd-mod-rrdns swconfig ubox ubus ubusd uci uclient-fetch uhttpd usign wireless-regdb wpad-mini luci-i18n-base-zh-cn -kmod-usb-core -kmod-usb2 -kmod-usb-ohci -kmod-usb-ledtrig-usbport\" 确定 小米路由器青春版 FILES 我们希望，刷机完成后，可以 默认开启无线 配置时区、NTP 添加自定义 ipk，如 luci-app-helloworld 为了实现这些，我们再次开始折腾设备，根据上述设定配置小米路由器青春版（先忽略自定义 ipk），配置完成后，备份并下载，得到备份文件 backup-OpenWrt-2019-09-11.tar.gz, 重命名为 factory-backup-OpenWrt-Xiaomi.tar.gz, 保存这个备份，作为出厂模式的版本备份。 解压缩备份文件，看一下文件结构 etc ├── config │ ├── dhcp │ ├── dropbear │ ├── firewall │ ├── luci │ ├── network │ ├── rpcd │ ├── system │ ├── ucitrack │ ├── uhttpd │ └── wireless ├── dropbear │ └── dropbear_rsa_host_key ├── group ├── hosts ├── inittab ├── luci-uploads ├── opkg │ ├── customfeeds.conf │ └── keys ├── passwd ├── profile ├── rc.local ├── shadow ├── shells └── sysctl.conf 说明 /etc/config/wireless 无线配置 /etc/config/network 网络配置 /etc/config/system 系统基本配置，如时区、NTP /etc/config/luci LuCI 配置，如语言、主题 /etc/shadow 加密后的密码 /etc/okpg/customfeeds.conf 自定义软件源 /etc/okpg/distfeeds.conf 发行版软件源 现在，我们在 Mac 上保留这几项配置至 xiaomi 这一目录, 上传 xiaomi 至 Ubuntu openwrt-imagebuilder-xiaomi 目录 (觉得 scp 命令繁琐的话，可以使用 Cyberduck 这一可视化 scp 工具) 最终，可以确定 小米路由器青春版 FILES=xiaomi 添加第三方软件包 仅使用官方源仓库中的软件，不能满足我们的需求，有时需要添加一些第三方软件包。安全是第一考量，使用闭源的第三方 ipk，有可能会留有后门，导致不可估量的后果，所以更推荐开源、活跃的第三方软件包。 除了安全性，第三方软件包是否适合自己的硬件也是衡量标准之一。我们需要知道第三方软件包依赖了那些程序、是否支持我们的硬件，通常，这可以在开源仓库的 README 文件中找到指引。 阅读: 使用 SDK 编译特定软件包 接下来，我们来看一个文件 openwrt-imagebuilder-xiaomi/repositories.conf, 这对我们接下来的工作有所启发 ## Place your custom repositories here, they must match the architecture and version. # src/gz %n http://downloads.openwrt.org/releases/18.06.4 # src custom file:///usr/src/openwrt/bin/ramips/packages ## Remote package repositories src/gz openwrt_core http://downloads.openwrt.org/releases/18.06.4/targets/ramips/mt76x8/packages src/gz openwrt_base http://downloads.openwrt.org/releases/18.06.4/packages/mipsel_24kc/base src/gz openwrt_luci http://downloads.openwrt.org/releases/18.06.4/packages/mipsel_24kc/luci src/gz openwrt_packages http://downloads.openwrt.org/releases/18.06.4/packages/mipsel_24kc/packages src/gz openwrt_routing http://downloads.openwrt.org/releases/18.06.4/packages/mipsel_24kc/routing src/gz openwrt_telephony http://downloads.openwrt.org/releases/18.06.4/packages/mipsel_24kc/telephony ## This is the local package repository, do not remove! src imagebuilder file:packages 本地添加第三方 ipk 由 src imagebuilder file:packages 可知，置于 openwrt-imagebuilder-xiaomi/packages 目录下的 ipk 包会被直接打包到固件中 编译生成适合自己的第三方 ipk 后，将第三方 ipk 文件挪至 openwrt-imagebuilder-xiaomi/packages/ 目录下，然后在编译参数 PACKAGES 中声明即可 我们也可以指定 ipk 目录，由 src custom file:///usr/src/openwrt/bin/ramips/packages 可知，Image Builder 支持添加本地软件包的生成目录，将 ipk 组装到固件中 添加信任的第三方软件包仓库 同样，Image Builder 也支持从远程仓库中下载 ipk 包，最后组装到固件中 repositories.conf 可以帮助我们统一存放第三方 ipk，免除一些频繁编译 ipk 包的痛苦。 注意： Image Builder 并不能从源码编译，更多时候，它只是一个组装工具，帮助我们将各种 ipk 包组装到固件镜像中。 以 HelloWorld helloworld 为例，将 helloworld.ipk 文件上传到 openwrt-imagebuilder-xiaomi/packages 目录，在编译参数 PACKAGES 中添加 helloworld 开始编译 以上操作无误的话，此时，openwrt-imagebuilder-xiaomi 的文件结构为 openwrt-imagebuilder-xiaomi ├── build_dir ├── include ├── Makefile ├── packages ├── repositories.conf ├── rules.mk ├── scripts ├── staging_dir ├── target └── xiaomi 编译固件 $ cd openwrt-imagebuilder-xiaomi $ make image PROFILE=miwifi-nano \\ PACKAGES=\"base-files busybox dnsmasq dropbear firewall fstools fwtool hostapd-common ip6tables iptables iw iwinfo jshn jsonfilter kernel kmod-cfg80211 kmod-gpio-button-hotplug kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-offload kmod-leds-gpio kmod-lib-crc-ccitt kmod-mac80211 kmod-mt76 kmod-mt76-core kmod-mt7603 kmod-mt76x02-common kmod-mt76x2 kmod-mt76x2-common kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-ipt6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-nls-base kmod-ppp kmod-pppoe kmod-pppox kmod-slhc libblobmsg-json libc libgcc libip4tc libip6tc libiwinfo libiwinfo-lua libjson-c libjson-script liblua liblucihttp liblucihttp-lua libnl-tiny libpthread libubox libubus libubus-lua libuci libuclient libxtables logd lua luci luci-app-firewall luci-base luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-proto-ipv6 luci-proto-ppp luci-theme-bootstrap mtd netifd odhcp6c odhcpd-ipv6only openwrt-keyring opkg ppp ppp-mod-pppoe procd rpcd rpcd-mod-rrdns swconfig ubox ubus ubusd uci uclient-fetch uhttpd usign wireless-regdb wpad-mini luci-i18n-base-zh-cn -kmod-usb-core -kmod-usb2 -kmod-usb-ohci -kmod-usb-ledtrig-usbport helloworld\" \\ FILES=xiaomi 如果遇到编译失败，尝试运行 make clean 清理临时编译文件和生成的镜像，再重新编译 编译成功的话，在 openwrt-imagebuilder-xiaomi/bin/targets/ramips/mt76x8/ 目录下便可以找到相应的 bin 文件，小米路由器青春版为 openwrt-18.06.4-ramips-mt76x8-miwifi-nano-squashfs-sysupgrade.bin 小结 现在，我们来回顾一下使用 Image Builder 编译定制小米路由器青春版固件的步骤 (不包含第三方软件包): Ubuntu 下载 小米路由器青春版 Image Builder，解压并重命名为 openwrt-imagebuilder-xiaomi, 存放在用户根目录 cd ~ wget http://downloads.openwrt.org/releases/18.06.4/targets/ramips/mt76x8/openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz mv openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz openwrt-imagebuilder-xiaomi rm -rf openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz 下载路由器配置备份，存放至 ~/oh-my-openwrt-devices cd ~ git clone https://github.com/stuarthua/oh-my-openwrt oh-my-openwrt-devices git checkout -b devices origin/devices 终端开启代理 - startss, 开始编译 cd ~/openwrt-imagebuilder-xiaomi make image PROFILE=miwifi-nano \\ PACKAGES=\"base-files busybox dnsmasq dropbear firewall fstools fwtool hostapd-common ip6tables iptables iw iwinfo jshn jsonfilter kernel kmod-cfg80211 kmod-gpio-button-hotplug kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-offload kmod-leds-gpio kmod-lib-crc-ccitt kmod-mac80211 kmod-mt76 kmod-mt76-core kmod-mt7603 kmod-mt76x02-common kmod-mt76x2 kmod-mt76x2-common kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-ipt6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-nls-base kmod-ppp kmod-pppoe kmod-pppox kmod-slhc libblobmsg-json libc libgcc libip4tc libip6tc libiwinfo libiwinfo-lua libjson-c libjson-script liblua liblucihttp liblucihttp-lua libnl-tiny libpthread libubox libubus libubus-lua libuci libuclient libxtables logd lua luci luci-app-firewall luci-base luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-proto-ipv6 luci-proto-ppp luci-theme-bootstrap mtd netifd odhcp6c odhcpd-ipv6only openwrt-keyring opkg ppp ppp-mod-pppoe procd rpcd rpcd-mod-rrdns swconfig ubox ubus ubusd uci uclient-fetch uhttpd usign wireless-regdb wpad-mini luci-i18n-base-zh-cn -kmod-usb-core -kmod-usb2 -kmod-usb-ohci -kmod-usb-ledtrig-usbport\" \\ FILES=~/oh-my-openwrt-devices/devices/xiaomi 编译成功的话，在 openwrt-imagebuilder-xiaomi/bin/targets/ramips/mt76x8/ 目录，我们可以得到固件 openwrt-18.06.4-ramips-mt76x8-miwifi-nano-squashfs-sysupgrade.bin 固件文件路径过深，为便于查看，可以在用户根目录建立软连接 $ mkdir -p ~/image-bins $ ln -s /home/stuart/openwrt-imagebuilder-xiaomi/bin/targets/ramips/mt76x8 /home/stuart/image-bins/xiaomi 固件特性： 开启无线 WIFI 国内时区、NTP LuCI 中文语言 国内源 访问 地址: 192.168.1.1 密码: password Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/my-make-scripts.html":{"url":"mybook/make/my-make-scripts.html","title":"编译时一些个人使用的脚本","keywords":"","body":"编译时一些个人使用的脚本 x86 OpenWrt 18.06.4 环境部署（Image Builder, SDK） 终端开启翻墙 - startss #!/usr/bin/env bash cd ~ # image builder wget https://downloads.openwrt.org/releases/18.06.4/targets/x86/64/openwrt-imagebuilder-18.06.4-x86-64.Linux-x86_64.tar.xz tar -xvf openwrt-imagebuilder-18.06.4-x86-64.Linux-x86_64.tar.xz mv openwrt-imagebuilder-18.06.4-x86-64.Linux-x86_64 openwrt-imagebuilder-x86 rm -rf openwrt-imagebuilder-18.06.4-x86-64.Linux-x86_64.tar.xz # sdk wget https://downloads.openwrt.org/releases/18.06.4/targets/x86/64/openwrt-sdk-18.06.4-x86-64_gcc-7.3.0_musl.Linux-x86_64.tar.xz tar -xvf openwrt-sdk-18.06.4-x86-64_gcc-7.3.0_musl.Linux-x86_64.tar.xz mv openwrt-sdk-18.06.4-x86-64_gcc-7.3.0_musl.Linux-x86_64 openwrt-sdk-x86 rm -rf openwrt-sdk-18.06.4-x86-64_gcc-7.3.0_musl.Linux-x86_64.tar.xz # ln image builder mkdir -p /home/stuart/openwrt-imagebuilder-x86/bin/targets/x86/64 mkdir -p /home/stuart/image-bins ln -s /home/stuart/openwrt-imagebuilder-x86/bin/targets/x86/64 /home/stuart/image-bins/x86 # ln sdk mkdir -p /home/stuart/openwrt-sdk-x86/bin/packages/x86_64/stuart mkdir -p /home/stuart/sdk-ipks ln -s /home/stuart/openwrt-sdk-x86/bin/packages/x86_64/stuart /home/stuart/sdk-ipks/x86 SDK 终端开启翻墙 - startss 准备 cd ~ && git clone https://github.com/stuarthua/oh-my-openwrt 更新 cd ~/oh-my-openwrt && git pull 编辑 ~/openwrt-sdk-x86/feeds.conf.default vi ~/openwrt-sdk-x86/feeds.conf.default # 添加 src-link stuart /home/stuart/oh-my-openwrt/stuart feeds 更新并安装 cd ~/openwrt-sdk-x86 && ./scripts/feeds update -a && ./scripts/feeds install -a 编译软件包 进入 ~/openwrt-sdk-x86 cd ~/openwrt-sdk-x86 以 helloworld 为例，执行编译 make package/helloworld/compile V=s 在 ~/sdk-ipks/x86 目录查看生成的软件包 脚本化 更新 新建脚本 update_by_stuart.sh cd ~/openwrt-sdk-x86 touch update_by_stuart.sh 编辑 update_by_stuart.sh #!/usr/bin/env bash cd ~/oh-my-openwrt && git pull cd ~/openwrt-sdk-x86 && ./scripts/feeds update stuart && ./scripts/feeds install -a -p stuart 编译 新建脚本 make_by_stuart.sh cd ~/openwrt-sdk-x86 touch make_by_stuart.sh 编辑 make_by_stuart.sh #!/usr/bin/env bash #make package/helloworld/compile V=s #make package/luci-app-stuart/compile V=s make package/luci-app-ramfree/compile V=s make package/luci-app-fileassistant/compile V=s make package/luci-app-arpbind/compile V=s make package/luci-app-usb-printer/compile V=s make package/luci-app-autoreboot/compile V=s make package/vlmcsd/compile V=s make package/luci-app-vlmcsd/compile V=s make package/luci-app-xlnetacc/compile V=s make package/luci-app-timewol/compile V=s make package/luci-app-mia/compile V=s make package/luci-app-webrestriction/compile V=s make package/luci-app-weburl/compile V=s make package/adbyby/compile V=s make package/luci-app-adbyby-plus/compile V=s make package/luci-app-ttyd/compile V=s make package/chinadns/compile V=s make package/dns-forwarder/compile V=s make package/luci-app-puredns/compile V=s make package/shadowsocks/compile V=s make package/luci-app-shadowsocks/compile V=s # make package/shadowsocksr-libev/compile V=s # make package/kcptun/compile V=s # make package/v2ray/compile V=s # make package/pdnsd-alt/compile V=s # make package/luci-app-ssr-plus/compile V=s 在 ~/sdk-ipks/x86 目录查看生成的软件包，将其上传至路由器 安装第三方软件包 SSH 连接路由器 opkg install *.ipk 删除 LuCI 缓存，刷新浏览器界面，查看是否生效 rm -rf /tmp/luci-* 移除第三方旧软件包 SSH 连接路由器 ## 移除第三方程序语言包 opkg remove luci-i18n-arpbind-zh-cn luci-i18n-autoreboot-zh-cn luci-i18n-usb-printer-zh-cn luci-i18n-vlmcsd-zh-cn luci-i18n-adbyby-plus-zh-cn luci-i18n-ttyd-zh-cn ## 移除第三方程序 opkg remove luci-app-ramfree luci-app-fileassistant luci-app-arpbind luci-app-usb-printer luci-app-autoreboot luci-app-vlmcsd vlmcsd luci-app-xlnetacc luci-app-timewol luci-app-mia luci-app-webrestriction luci-app-weburl luci-app-adbyby-plus adbyby luci-app-ttyd luci-app-shadowsocks shadowsocks luci-app-chinadns luci-app-dns-forwarder ChinaDNS dns-forwarder Image Builder 终端开启翻墙 - startss 准备 cd ~ && git clone https://github.com/stuarthua/oh-my-openwrt oh-my-openwrt-devices && git checkout -b devices origin/devices 更新 cd ~/oh-my-openwrt-devices && git pull 生成固件 进入 ~/openwrt-imagebuilder-x86 cd ~/openwrt-imagebuilder-x86 执行编译 make image PROFILE=Generic \\ PACKAGES=\"base-files busybox dnsmasq dropbear e2fsprogs firewall fstools fwtool ip6tables iptables jshn jsonfilter kernel kmod-button-hotplug kmod-e1000 kmod-e1000e kmod-hwmon-core kmod-i2c-algo-bit kmod-i2c-core kmod-igb kmod-input-core kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-offload kmod-lib-crc-ccitt kmod-mii kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-ipt6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-ppp kmod-pppoe kmod-pppox kmod-pps kmod-ptp kmod-r8169 kmod-slhc libblkid libblobmsg-json libc libcomerr libext2fs libf2fs libgcc libip4tc libip6tc libiwinfo libiwinfo-lua libjson-c libjson-script liblua liblucihttp liblucihttp-lua libnl-tiny libpthread librt libsmartcols libss libubox libubus libubus-lua libuci libuclient libuuid libxtables logd lua luci luci-app-firewall luci-base luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-proto-ipv6 luci-proto-ppp luci-theme-bootstrap mkf2fs mtd netifd odhcp6c odhcpd-ipv6only openwrt-keyring opkg partx-utils ppp ppp-mod-pppoe procd r8169-firmware rpcd rpcd-mod-rrdns ubox ubus ubusd uci uclient-fetch uhttpd usign luci-i18n-base-zh-cn\" \\ FILES=~/oh-my-openwrt-devices/devices/x86 在 ~/image-bins/x86 目录查看生成的固件 小米路由器青春版 OpenWrt 18.06.4 环境部署（Image Builder, SDK） 终端开启翻墙 - startss #!/usr/bin/env bash cd ~ # image builder wget http://downloads.openwrt.org/releases/18.06.4/targets/ramips/mt76x8/openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz tar -xvf openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz mv openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64 openwrt-imagebuilder-xiaomi rm -rf openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz # sdk wget https://downloads.openwrt.org/releases/18.06.4/targets/ramips/mt76x8/openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64.tar.xz tar -xvf openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64.tar.xz mv openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64 openwrt-sdk-xiaomi rm -rf openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64.tar.xz # ln image builder mkdir -p /home/stuart/openwrt-imagebuilder-xiaomi/bin/targets/ramips/mt76x8 mkdir -p /home/stuart/image-bins ln -s /home/stuart/openwrt-imagebuilder-xiaomi/bin/targets/ramips/mt76x8 /home/stuart/image-bins/xiaomi # ln sdk mkdir -p /home/stuart/openwrt-sdk-xiaomi/bin/packages/mipsel_24kc/base mkdir -p /home/stuart/sdk-ipks ln -s /home/stuart/openwrt-sdk-xiaomi/bin/packages/mipsel_24kc/base /home/stuart/sdk-ipks/xiaomi Image Builder 终端开启翻墙 - startss 准备 cd ~ && git clone https://github.com/stuarthua/oh-my-openwrt oh-my-openwrt-devices && git checkout -b devices origin/devices 更新 cd ~/oh-my-openwrt-devices && git pull 生成固件 进入 ~/openwrt-imagebuilder-xiaomi cd ~/openwrt-imagebuilder-xiaomi 执行编译 make image PROFILE=miwifi-nano \\ PACKAGES=\"base-files busybox dnsmasq dropbear firewall fstools fwtool hostapd-common ip6tables iptables iw iwinfo jshn jsonfilter kernel kmod-cfg80211 kmod-gpio-button-hotplug kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-offload kmod-leds-gpio kmod-lib-crc-ccitt kmod-mac80211 kmod-mt76 kmod-mt76-core kmod-mt7603 kmod-mt76x02-common kmod-mt76x2 kmod-mt76x2-common kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-ipt6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-nls-base kmod-ppp kmod-pppoe kmod-pppox kmod-slhc libblobmsg-json libc libgcc libip4tc libip6tc libiwinfo libiwinfo-lua libjson-c libjson-script liblua liblucihttp liblucihttp-lua libnl-tiny libpthread libubox libubus libubus-lua libuci libuclient libxtables logd lua luci luci-app-firewall luci-base luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-proto-ipv6 luci-proto-ppp luci-theme-bootstrap mtd netifd odhcp6c odhcpd-ipv6only openwrt-keyring opkg ppp ppp-mod-pppoe procd rpcd rpcd-mod-rrdns swconfig ubox ubus ubusd uci uclient-fetch uhttpd usign wireless-regdb wpad-mini luci-i18n-base-zh-cn -kmod-usb-core -kmod-usb2 -kmod-usb-ohci -kmod-usb-ledtrig-usbport\" \\ FILES=~/oh-my-openwrt-devices/devices/xiaomi 在 ~/image-bins/xiaomi 目录查看生成的固件 SDK 终端开启翻墙 - startss 准备 cd ~ && git clone https://github.com/stuarthua/oh-my-openwrt 更新 cd ~/oh-my-openwrt && git pull 编辑 ~/openwrt-sdk-xiaomi/feeds.conf.default vi ~/openwrt-sdk-xiaomi/feeds.conf.default # 添加 src-link stuart /home/stuart/oh-my-openwrt/stuart feeds 更新并安装 cd ~/openwrt-sdk-xiaomi && ./scripts/feeds update -a && ./scripts/feeds install -a 编译软件包 进入 ~/openwrt-sdk-xiaomi cd ~/openwrt-sdk-xiaomi 以 helloworld 为例，执行编译 make package/helloworld/compile V=s 在 ~/sdk-ipks/xiaomi 目录查看生成的软件包 附录 更新 stuart 软件源仓库及 devices 终端开启翻墙 - startss cd ~/oh-my-openwrt && git pull && cd ~/oh-my-openwrt-devices && git pull feeds 更新及安装 (x86, xiaomi) 终端开启翻墙 - startss cd ~/openwrt-sdk-xiaomi && ./scripts/feeds update -a && ./scripts/feeds install -a && cd ~/openwrt-sdk-x86 && ./scripts/feeds update -a && ./scripts/feeds install -a Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/port-package.html":{"url":"mybook/make/port/port-package.html","title":"移植软件包","keywords":"","body":"移植软件包 介绍一些个人常用软件包的移植及其使用 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-free-memory.html":{"url":"mybook/make/port/use-package-free-memory.html","title":"移植软件包 - 释放内存","keywords":"","body":"移植软件包 - 释放内存 以 释放内存 为例，以下记录移植 Lean OpenWrt 软件包的过程，仅供参考 最终效果预览： 获取软件包源码 软件包: 释放内存 源码地址: lede/luci-app-ramfree 原效果预览： 拷贝存放至自己的仓库中 stuarthua/oh-my-openwrt, 目录如下 stuart ├── helloworld ├── luci-app-stuart └── luci-app-ramfree 定制软件包 阅读: 软件包 (示例) - 自定义 Luci 菜单 比较建议的做法是，定制软件包时，将所有的软件包 LuCI 可视化操作统一归置到 自定义菜单中，方便后续拓展。 现在，我们希望，释放内存 在 LuCI 中挪至单独的菜单 Stuart 中，便于后续的升级拓展。 修改后效果预览： 修改版源码见: stuart/luci-app-ramfree 修改说明： 修改 LuCI 菜单目录 使用 SDK 编译软件包 参考: 使用 SDK 编译特定软件包 Mac 上使用 SSH 连接 Ubuntu 更新第三方软件包代码 cd ~/oh-my-openwrt && git pull feeds 更新并安装 cd ~/openwrt-sdk-x86 && ./scripts/feeds update -a && ./scripts/feeds install -a 单独更新 stuart cd ~/openwrt-sdk-x86 && ./scripts/feeds update stuart && ./scripts/feeds install -a -p stuart 进入 ~/openwrt-sdk-x86, 开始编译 cd ~/openwrt-sdk-x86 && make package/luci-app-ramfree/compile V=s 在 ~/sdk-ipks/x86 目录查看生成的软件包 x86 └── luci-app-ramfree_1.0-1_all.ipk 生成 ipk 文件 luci-app-ramfree_1.0-1_all.ipk 安装及使用 参考: 软件包 (示例) - HelloWorld 原生 OpenWrt 固件默认没有开启 sftp 服务，需要我们手动安装并开启 opkg update opkg install vsftpd openssh-sftp-server /etc/init.d/vsftpd enable /etc/init.d/vsftpd start 使用 Cyberduck 上传 ipk 安装包至路由器 Mac 上使用 SSH 连接路由器，执行安装 opkg install luci-app-ramfree_1.0-1_all.ipk 安装后，如果界面没有变化，可以尝试移除 luci 缓存，刷新页面 rm -rf /tmp/luci-* 也可以尝试重启 http 服务，在刷新页面 /etc/init.d/uhttpd restart 如需卸载，执行 opkg remove luci-app-ramfree Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-filetransfer.html":{"url":"mybook/make/port/use-package-filetransfer.html","title":"移植软件包 - 文件助手","keywords":"","body":"移植软件包 - 文件助手 使用 OpenWrt 时，离线安装 ipk 是一项不可或缺的功能 效果预览： 以下记录移植该软件包的过程，仅供参考 获取软件包源码 软件包: 文件助手 源码地址: DarkDean89/luci-app-filebrowser 拷贝存放至自己的仓库中 stuarthua/oh-my-openwrt, 目录如下 stuart ├── helloworld ├── luci-app-stuart ├── luci-app-stuart-ramfree └── luci-app-stuart-fileassistant 定制软件包 阅读: 软件包 (示例) - 自定义 Luci 菜单 同样，我们将 文件助手 在 LuCI 中挪至单独的菜单 Stuart 中，便于后续的升级拓展。 修改版源码见: stuart/luci-app-stuart-fileassistant 修改说明： 修改 LuCI 菜单目录 增加安装 ipk 功能 使用 SDK 编译软件包 参考: 使用 SDK 编译特定软件包 Mac 上使用 SSH 连接 Ubuntu 更新第三方软件包代码 cd ~/oh-my-openwrt && git pull feeds 更新并安装 cd ~/openwrt-sdk-x86 && ./scripts/feeds update -a && ./scripts/feeds install -a 单独更新 stuart cd ~/openwrt-sdk-x86 && ./scripts/feeds update stuart && ./scripts/feeds install -a -p stuart 进入 ~/openwrt-sdk-x86, 开始编译 cd ~/openwrt-sdk-x86 && make package/luci-app-stuart-fileassistant/compile V=s 在 ~/sdk-ipks/x86 目录查看生成的软件包 x86 └── luci-app-stuart-fileassistant_1.0-1_all.ipk 生成 ipk 文件 luci-app-stuart-fileassistant_1.0-1_all.ipk 安装及使用 参考: 软件包 (示例) - HelloWorld 原生 OpenWrt 固件默认没有开启 sftp 服务，需要我们手动安装并开启 opkg update opkg install vsftpd openssh-sftp-server /etc/init.d/vsftpd enable /etc/init.d/vsftpd start 使用 Cyberduck 上传 ipk 安装包至路由器 Mac 上使用 SSH 连接路由器，执行安装 opkg install luci-app-fileassistant_1.0-1_all.ipk 安装后，如果界面没有变化，可以尝试移除 luci 缓存，刷新页面 rm -rf /tmp/luci-* 也可以尝试重启 http 服务，在刷新页面 /etc/init.d/uhttpd restart 如需卸载，执行 opkg remove luci-app-stuart-fileassistant Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-arpbind.html":{"url":"mybook/make/port/use-package-arpbind.html","title":"移植软件包 - IP/MAC 绑定","keywords":"","body":"移植软件包 - IP/MAC 绑定 最终效果预览： 修改版源码见: stuart/luci-app-arpbind 修改说明： 修改 LuCI 菜单目录 说明 移植自 lean/luci-app-arpbind 依赖库： 路由控制工具 - 官方 - ip-full Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-auto-reboot.html":{"url":"mybook/make/port/use-package-auto-reboot.html","title":"移植软件包 - 定时重启","keywords":"","body":"移植软件包 - 定时重启 最终效果预览： 修改版源码见: stuart/luci-app-autoreboot 修改说明： 修改 LuCI 菜单目录 说明 移植自 lean/luci-app-autoreboot Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-time-control.html":{"url":"mybook/make/port/use-package-time-control.html","title":"移植软件包 - 上网时间控制","keywords":"","body":"移植软件包 - 上网时间控制 最终效果预览： 修改版源码见: stuart/luci-app-mia 修改说明： 修改 LuCI 菜单目录 说明 移植自 KoolShare Fork 仓库 lienol/luci-app-control-mia Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-visit-control.html":{"url":"mybook/make/port/use-package-visit-control.html","title":"移植软件包 - 访问控制","keywords":"","body":"移植软件包 - 访问控制 最终效果预览： 修改版源码见: stuart/luci-app-webrestriction 修改说明： 修改 LuCI 菜单目录 说明 移植自 KoolShare Fork 仓库 lienol/luci-app-control-webrestriction Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-timewol.html":{"url":"mybook/make/port/use-package-timewol.html","title":"移植软件包 - 定时唤醒","keywords":"","body":"移植软件包 - 定时唤醒 最终效果预览： 修改版源码见: stuart/luci-app-stuart-timewol 修改说明： 修改 LuCI 菜单目录 说明 移植自 KoolShare Fork 仓库 lienol/luci-app-control-timewol Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-weburl.html":{"url":"mybook/make/port/use-package-weburl.html","title":"移植软件包 - 网址过滤","keywords":"","body":"移植软件包 - 网址过滤 最终效果预览： 修改版源码见: stuart/luci-app-weburl 修改说明： 修改 LuCI 菜单目录 说明 移植自 KoolShare Fork 仓库 lienol/luci-app-control-weburl 依赖： 用于数据包内容检查的 iptables 扩展，支持匹配字符串 - 官方 - iptables-mod-filter 用于数据包内容检查的 Netfilter (IPv4) 内核模块，支持匹配字符串 - 官方 - kmod-ipt-filter Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-usb-printer.html":{"url":"mybook/make/port/use-package-usb-printer.html","title":"移植软件包 - USB 打印服务器","keywords":"","body":"移植软件包 - USB 打印服务器 最终效果预览： 修改版源码见: stuart/luci-app-usb-printer 修改说明： 修改 LuCI 菜单目录 说明 移植自 lean/luci-app-usb-printer 依赖库： 打印机驱动程序的守护进程 - 官方 - p910nd USB 打印机驱动程序 - 官方 - kmod-usb-printer Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-kms.html":{"url":"mybook/make/port/use-package-kms.html","title":"移植软件包 - KMS 自动激活程序","keywords":"","body":"移植软件包 - KMS 自动激活程序 用于激活大客户版 Windows 及 Office，最新支持至 Windows 10 1809, Windows Server 2019 and Office 2019 built-in 最终效果预览： 修改版源码见: stuart/luci-app-vlmcsd stuart/vlmcsd 修改说明： 修改 LuCI 菜单目录 说明 移植自 lean/luci-app-vlmcsd lean/vlmcsd luci-app-vlmcsd 依赖 vlmcsd, 而 vlmcsd 是一个第三方程序，编译它依赖： POSIX 线程库 - 官方 - libpthread 关于 vlmcsd lean/vlmcsd 会下载 etnperlong/vlmcsd 的源码进行编译。而 etnperlong/vlmcsd 则 Fork 自 cokebar/vlmcsd，其最终都是来自 mydigitallife。除了 etnperlong 和 cokebar 整理的版本，使用最多的还是 Wind4/vlmcsd，在这里，提供了一些可供使用的激活码 Wind4/gh-pages mydigitallife 中关于 vlmcsd 的介绍 Wind4/gh-pages 中提供的激活码 使用 参考 在 VPS 中利用 vlmcsd 搭建 KMS 激活服务器 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-ttyd.html":{"url":"mybook/make/port/use-package-ttyd.html","title":"移植软件包 - 网页终端命令行","keywords":"","body":"移植软件包 - 网页终端命令行 最终效果预览： 修改版源码见: stuart/luci-app-ttyd 修改说明： 修改 LuCI 菜单目录 说明 移植自 lean/luci-app-ttyd 依赖： ttyd 工具包 - 官方 ttyd Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-xunlei.html":{"url":"mybook/make/port/use-package-xunlei.html","title":"移植软件包 - 迅雷快鸟","keywords":"","body":"移植软件包 - 迅雷快鸟 官网 - 迅雷快鸟，是迅雷与中国电信、中国联通合作推出的一项上网加速服务，技术原理为大幅提高用户现有物理宽带带宽，提升上网速度。但有提速范围但限制，超过 200M 网速的宽带无法提速。 查看提速范围：官网 - 提速范围 最终效果预览： 修改版源码见: stuart/luci-app-xlnetacc 修改说明： 修改 LuCI 菜单目录 修改页面样式 说明 移植自 lean/luci-app-xlnetacc 依赖： 从 shell 脚本解析和生成 JSON 的库 - 官方 - jshn 命令行下载工具 - 官方 - wget openssl-util - 官方 - openssl-util Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-adbyby.html":{"url":"mybook/make/port/use-package-adbyby.html","title":"移植软件包 - 广告屏蔽大师 Plus +","keywords":"","body":"移植软件包 - 广告屏蔽大师 Plus + 最终效果预览： 修改版源码见: stuart/luci-app-adbyby-plus stuart/adbyby 修改说明： 修改 LuCI 菜单目录 说明 移植自 lean/luci-app-adbyby-plus lean/adbyby 依赖： 广告屏蔽大师 - 第三方 - adbyby | kysdm/adbyby 命令行下载工具 - 官方 - wget IPSet 工具 - 官方 - ipset core 工具包 - 官方 - coreutils nohup 工具包 - 官方 coreutils-nohup DNSmasq 完整版 - 官方 dnsmasq-full Configuring kmod-nfnetlink. Configuring libgmp. Configuring libnettle. Configuring kmod-ipt-ipset. Configuring libipset. Configuring coreutils. Configuring ipset. Configuring coreutils-nohup. Configuring dnsmasq-full. Configuring adbyby. Configuring luci-app-adbyby-plus. 论坛原帖: 恩山 - Adbyby Plus+ 去广告 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-shadowsocks-plus.html":{"url":"mybook/make/port/use-package-shadowsocks-plus.html","title":"移植软件包 - 科学上网增强版","keywords":"","body":"移植软件包 - 科学上网增强版 来自 Lean 的科学上网增强版，支持 shadowsocksr, v2ray, shadowsocks, kcptun. 但 shadowsocksr 版本目前已经不再维护，故而不是很推荐使用所谓的三合一版。 最终效果预览： 修改版源码见: stuart/v2ray stuart/kcptun stuart/pdnsd-alt stuart/shadowsocks-libev stuart/luci-app-ssr-plus 修改说明: 修改 gfwlist 下载地址为自定义 gfwlist 使用说明： 搭配 shadowsocksr-libev, pdnsd-alt 使用，也可搭配 kcptun、v2ray (注意，v2ray 体积比较大，在某些路由器上可能不适用) 需要卸载 Openwrt 自带的 dnsmasq, 安装 dnsmasq-full 版本（注意，当卸载 dnsmasq 之后，无法解析域名，也就无法安装 dnsmasq-full, 需要卸载和安装同步, 即 opkg remove dnsmasq && opkg install dnsmasq-full） 说明 移植自 lean/v2ray lean/kcptun lean/pdnsd-alt lean/shadowsocks-libev lean/luci-app-ssr-plus Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make/port/use-package-aliddns.html":{"url":"mybook/make/port/use-package-aliddns.html","title":"移植软件包 - 阿里云 DDNS","keywords":"","body":"移植软件包 - 阿里云 DDNS 暂未更新 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make-my/":{"url":"mybook/make-my/","title":"定制个人 OpenWrt","keywords":"","body":"定制个人 OpenWrt 比较推荐的做法是，先使用一段时间 OpenWrt 及其软件包，确认哪些软件包和设置是自己需要的，哪些软件包是临时使用且会随时更新的，然后有针对性地制作适合自己的固件。 以下记录自己实际使用一段时间后，最终稳定使用的 OpenWrt 固件 x86 软路由 小米路由器青春版 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make-my/x86.html":{"url":"mybook/make-my/x86.html","title":"适用于 x86 硬件的 OpenWrt","keywords":"","body":"定制适用于 x86 硬件的 OpenWrt 在虚拟机上使用了一段时间 OpenWrt ，基本熟悉后，根据个人需求，确定好所需的软件包，开始着手定制个人使用的 OpenWrt 固件（在官方固件 OpenWrt 18.06.4 基础上）。 确定所需软件包 搭建环境 使用 SDK 编译所需的特定软件包（如 Shadowsocks） 使用 Image Builder 组装固件，生成个人定制版固件 准备 一台 Mac Ubuntu 14.04 LTS（运行在 VMware ）- 阅读：在 Mac 上使用 VMware 安装 Ubuntu 14.04 LTS 一台 x86 软路由 确定所需软件包 官方软件包 LuCI 及其依赖 luci-i18n-base-zh-cn - LuCI 中文语言包 luci-app-firewall - 防火墙 luci-i18n-firewall-zh-cn - 软件包 luci-app-firewall 的中文语言包 luci-app-ddns - 动态 DDNS luci-i18n-ddns-zh-cn - 软件包 luci-app-ddns 的中文语言包 ddns-scripts - 动态 DDNS 依赖的脚本 luci-app-adblock - Adblock，著名的去广告软件 luci-i18n-adblock-zh-cn - 软件包 luci-app-adblock 的中文语言包 adblock - Adblock luci-app-sqm - 智能队列管理 SQM Qos，智能解决网络延迟和阻塞 sqm-scripts - SQM 依赖的脚本 luci-app-uhttpd - uHTTPd 服务器 luci-i18n-uhttpd-zh-cn - 软件包 luci-app-uhttpd 的中文语言包 luci-ssl-openssl - for ssl ca-bundle - for ssl ca-certificates - for ssl curl - 下载工具 wget - 下载工具 vsftpd - for sftp openssh-sftp-server - for sftp ipset - for shadowsocks gfwlist iptables-mod-nat-extra - for shadowsocks gfwlist dnsmasq-full - for shadowsocks gfwlist, 与 dnsmasq 相冲突，需要忽略 dnsmasq iptables-mod-tproxy - for shadowsocks UDP-Relay ttyd - 网页命令行终端 kmod-usb-net-asix-ax88179 - USB 转以太网口 kmod-usb3 - USB 3.0 支持 kmod-usb2 - USB 2.0 支持 第三方软件包 LuCI 及其依赖 luci-app-ramfree - 释放内存 luci-app-fileassistant - 文件助手，支持上传文件、安装 IPK 软件包 luci-app-arpbind - IP/Mac 绑定 luci-i18n-arpbind-zh-cn - 软件包 luci-app-arpbind 的中文语言包 luci-app-usb-printer - USB 打印服务器 luci-i18n-usb-printer-zh-cn - 软件包 luci-app-usb-printer 的中文语言包 luci-app-autoreboot - 定时重启 luci-i18n-autoreboot-zh-cn - 软件包 luci-app-autoreboot 的中文语言包 luci-app-vlmcsd - KMS 服务器，用于激活 Windows 及 Office vlmcsd - KMS Server luci-app-ttyd - LuCI for ttyd luci-i18n-ttyd-zh-cn - 软件包 luci-app-ttyd 的中文语言包 luci-app-shadowsocks - LuCI for Shadowsocks shadowsocks-libev - shadowsocks-libev luci-app-chinadns - LuCI for ChinaDNS ChinaDNS - ChinaDNS luci-app-dns-forwarder - LuCI for DNS Forwarder dns-forwarder - DNS Forwarder luci-i18n-sqm - 软件包 luci-app-sqm 的中文语言包 ddns-scripts_aliyun - DDNS for Aliyun.com 搭建环境 Ubuntu 14.04 LTS (运行在虚拟机 VMware 上， IP: 192.168.128.140， 终端可翻墙) 在 Mac 上 SSH 连接 Ubuntu 虚拟机 ssh stuart@192.168.128.140 新建脚本 set-x86.sh touch set-x86.sh 编辑脚本 set-x86.sh #!/usr/bin/env bash cd ~ # image builder wget https://downloads.openwrt.org/releases/18.06.4/targets/x86/64/openwrt-imagebuilder-18.06.4-x86-64.Linux-x86_64.tar.xz tar -xvf openwrt-imagebuilder-18.06.4-x86-64.Linux-x86_64.tar.xz mv openwrt-imagebuilder-18.06.4-x86-64.Linux-x86_64 openwrt-imagebuilder-x86 rm -rf openwrt-imagebuilder-18.06.4-x86-64.Linux-x86_64.tar.xz # sdk wget https://downloads.openwrt.org/releases/18.06.4/targets/x86/64/openwrt-sdk-18.06.4-x86-64_gcc-7.3.0_musl.Linux-x86_64.tar.xz tar -xvf openwrt-sdk-18.06.4-x86-64_gcc-7.3.0_musl.Linux-x86_64.tar.xz mv openwrt-sdk-18.06.4-x86-64_gcc-7.3.0_musl.Linux-x86_64 openwrt-sdk-x86 rm -rf openwrt-sdk-18.06.4-x86-64_gcc-7.3.0_musl.Linux-x86_64.tar.xz # ln image builder mkdir -p /home/stuart/openwrt-imagebuilder-x86/bin/targets/x86/64 mkdir -p /home/stuart/image-bins rm /home/stuart/image-bins/x86 ln -s /home/stuart/openwrt-imagebuilder-x86/bin/targets/x86/64 /home/stuart/image-bins/x86 # ln sdk mkdir -p /home/stuart/openwrt-sdk-x86/bin/packages/x86_64/stuart mkdir -p /home/stuart/sdk-ipks rm /home/stuart/sdk-ipks/x86 ln -s /home/stuart/openwrt-sdk-x86/bin/packages/x86_64/stuart /home/stuart/sdk-ipks/x86 终端开启翻墙 - startss, 执行脚本 set-x86.sh, 进行环境部署 startss bash set-x86.sh 至此，在 /home/stuart 用户目录下，存在 image-bins 和 sdk-ipks 两个目录，用来存放编译后的固件和 .ipk 软件包文件 使用 SDK 编译所需的特定软件包 添加个人软件包源码 终端开启翻墙 - startss，下载源码 cd ~ && git clone https://github.com/stuarthua/oh-my-openwrt 编辑 ~/openwrt-sdk-x86/feeds.conf.default 文件，添加个人源码路径 vi ~/openwrt-sdk-x86/feeds.conf.default # 添加 src-link stuart /home/stuart/oh-my-openwrt/stuart feeds 更新和安装 更新 SDK 中的 feeds 并安装 cd ~/openwrt-sdk-x86 && ./scripts/feeds update -a && ./scripts/feeds install -a 编译 新建脚本 make-ipks.sh #!/usr/bin/env bash # update cd ~/oh-my-openwrt && git pull origin master cd ~/openwrt-sdk-x86 && ./scripts/feeds update stuart && ./scripts/feeds install -a -p stuart # clean rm -rf /home/stuart/openwrt-sdk-x86/bin/packages/x86_64/stuart mkdir -p /home/stuart/openwrt-sdk-x86/bin/packages/x86_64/stuart # make # make package/helloworld/compile V=s # make package/luci-app-stuart/compile V=s # 迅雷快鸟 # make package/luci-app-xlnetacc/compile V=s # 网络唤醒 # make package/luci-app-timewol/compile V=s # 上网时间控制 # make package/luci-app-mia/compile V=s # 访问控制 # make package/luci-app-webrestriction/compile V=s # 网址过滤 # make package/luci-app-weburl/compile V=s # lean 翻墙三合一 # make package/shadowsocksr-libev/compile V=s # make package/kcptun/compile V=s # make package/v2ray/compile V=s # make package/pdnsd-alt/compile V=s # make package/luci-app-ssr-plus/compile V=s # adbyby 去广告 make package/adbyby/compile V=s make package/luci-app-adbyby-plus/compile V=s # 释放内存 make package/luci-app-ramfree/compile V=s # 文件助手 make package/luci-app-fileassistant/compile V=s # IP/Mac 绑定 make package/luci-app-arpbind/compile V=s # USB 打印服务器 make package/luci-app-usb-printer/compile V=s # 定时重启 make package/luci-app-autoreboot/compile V=s # KMS 自动激活（用于激活大客户版 Windows 及 Office） make package/vlmcsd/compile V=s make package/luci-app-vlmcsd/compile V=s # SQM 中文语言包 make package/luci-i18n-sqm/compile V=s # 网页终端命令行 make package/luci-app-ttyd/compile V=s # Aliyun DDNS make package/ddns-scripts_aliyun/compile V=s 执行编译脚本 make-ipks.sh bash make-ipks.sh 在 ~/sdk-ipks/x86 目录查看生成的 .ipk 软件包文件 使用 Image Builder 组装固件 添加个性化配置文件 终端开启翻墙 - startss，下载个性户配置文件 (一些路由器设置，如默认地址、密码、语言、时区等) cd ~ && git clone https://github.com/stuarthua/oh-my-openwrt oh-my-openwrt-devices && cd ~/oh-my-openwrt-devices && git checkout -b devices origin/devices 编译 新建脚本 make-image.sh #!/usr/bin/env bash # update cd ~/oh-my-openwrt-devices && git pull origin devices cd ~/openwrt-imagebuilder-x86 # clean rm -rf /home/stuart/openwrt-imagebuilder-x86/bin/targets/x86/64 mkdir -p /home/stuart/openwrt-imagebuilder-x86/bin/targets/x86/64 rm -rf ~/openwrt-imagebuilder-x86/packages/stuart # add ipks from stuart cp -r ~/openwrt-sdk-x86/bin/packages/x86_64/stuart ~/openwrt-imagebuilder-x86/packages # add ipks from shadowsocks (@aa65535 openwrt-dist) @http://openwrt-dist.sourceforge.net/ cp -r ~/oh-my-openwrt-devices/packages/all/openwrt-dist/*.ipk ~/openwrt-imagebuilder-x86/packages/stuart cp -r ~/oh-my-openwrt-devices/packages/x86/openwrt-dist/*.ipk ~/openwrt-imagebuilder-x86/packages/stuart # make ORG_ORIGIN_PKGS=\"base-files busybox dnsmasq dropbear e2fsprogs firewall fstools fwtool ip6tables iptables jshn jsonfilter kernel kmod-button-hotplug kmod-e1000 kmod-e1000e kmod-hwmon-core kmod-i2c-algo-bit kmod-i2c-core kmod-igb kmod-input-core kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-offload kmod-lib-crc-ccitt kmod-mii kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-ipt6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-ppp kmod-pppoe kmod-pppox kmod-pps kmod-ptp kmod-r8169 kmod-slhc libblkid libblobmsg-json libc libcomerr libext2fs libf2fs libgcc libip4tc libip6tc libiwinfo libiwinfo-lua libjson-c libjson-script liblua liblucihttp liblucihttp-lua libnl-tiny libpthread librt libsmartcols libss libubox libubus libubus-lua libuci libuclient libuuid libxtables logd lua luci luci-app-firewall luci-base luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-proto-ipv6 luci-proto-ppp luci-theme-bootstrap mkf2fs mtd netifd odhcp6c odhcpd-ipv6only openwrt-keyring opkg partx-utils ppp ppp-mod-pppoe procd r8169-firmware rpcd rpcd-mod-rrdns ubox ubus ubusd uci uclient-fetch uhttpd usign\" CUSTOM_ORG_PKGS=\"luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn luci-app-ddns luci-i18n-ddns-zh-cn luci-app-adblock luci-i18n-adblock-zh-cn luci-app-sqm luci-app-uhttpd luci-i18n-uhttpd-zh-cn luci-ssl-openssl ca-bundle ca-certificates curl wget vsftpd openssh-sftp-server ipset iptables-mod-nat-extra -dnsmasq dnsmasq-full iptables-mod-tproxy ttyd kmod-usb-net-asix-ax88179 kmod-usb3 kmod-usb2\" CUSTOM_PKGS=\"luci-app-ramfree luci-app-fileassistant luci-app-arpbind luci-i18n-arpbind-zh-cn luci-app-usb-printer luci-i18n-usb-printer-zh-cn luci-app-autoreboot luci-i18n-autoreboot-zh-cn vlmcsd luci-app-vlmcsd luci-i18n-vlmcsd-zh-cn luci-app-ttyd luci-i18n-ttyd-zh-cn adbyby luci-app-adbyby-plus luci-i18n-adbyby-plus-zh-cn shadowsocks-libev luci-app-shadowsocks ChinaDNS luci-app-chinadns dns-forwarder luci-app-dns-forwarder\" IMAGE_PKGS=\"$ORG_ORIGIN_PKGS $CUSTOM_ORG_PKGS $CUSTOM_PKGS\" make image PROFILE=Generic PACKAGES=\"$IMAGE_PKGS\" FILES=~/oh-my-openwrt-devices/devices/x86 echo \"编译结束\" 执行编译脚本 make-image.sh bash make-image.sh 在 ~/image-bins/x86 目录查看生成的固件 提示 OpenWrt 18.06.4 x86_64 官方固件中默认安装的包有 $ echo `opkg list_installed | awk '{ print $1 }'` base-files busybox dnsmasq dropbear e2fsprogs firewall fstools fwtool ip6tables iptables jshn jsonfilter kernel kmod-button-hotplug kmod-e1000 kmod-e1000e kmod-hwmon-core kmod-i2c-algo-bit kmod-i2c-core kmod-igb kmod-input-core kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-offload kmod-lib-crc-ccitt kmod-mii kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-ipt6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-ppp kmod-pppoe kmod-pppox kmod-pps kmod-ptp kmod-r8169 kmod-slhc libblkid libblobmsg-json libc libcomerr libext2fs libf2fs libgcc libip4tc libip6tc libiwinfo libiwinfo-lua libjson-c libjson-script liblua liblucihttp liblucihttp-lua libnl-tiny libpthread librt libsmartcols libss libubox libubus libubus-lua libuci libuclient libuuid libxtables logd lua luci luci-app-firewall luci-base luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-proto-ipv6 luci-proto-ppp luci-theme-bootstrap mkf2fs mtd netifd odhcp6c odhcpd-ipv6only openwrt-keyring opkg partx-utils ppp ppp-mod-pppoe procd r8169-firmware rpcd rpcd-mod-rrdns ubox ubus ubusd uci uclient-fetch uhttpd usign 安装固件 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make-my/use-x86.html":{"url":"mybook/make-my/use-x86.html","title":"使用说明","keywords":"","body":"使用 x86 固件 以下介绍如何使用个人定制版 x86 固件 固件下载地址：stuarthua/firmwares/x86 OpenWrt 与企业级路由器的使用基本一致，但可自定义的功能更多。一般而言，家庭里已经有一台性能不错的路由器，使用 OpenWrt 时，作旁路由（旁路网关）使用即可，可以设定去广告、科学上网等功能，所有流量都经过 OpenWrt 过滤。OpenWrt 作旁路由（旁路网关）时，原主路由的 Qos 功能会显示所有流量都经由 OpenWrt，查看时会有些许复杂，需要一一查找。而使用 OpenWrt 作主路由使用的话，原路由器作二级路由即可，所有的设定均可延续，无需重新设置。 OpenWrt 路由器的工作模式，依照个人场景进行选择即可。 作主路由使用 OpenWrt 作为主路由。适用于 OpenWrt 路由器有多个网口的情况。 无公网 IP OpenWrt 路由器连接光猫即可，默认配置即可 LuCI ---> 网络 ---> 接口 ---> WAN 有公网 IP 光猫已经设置桥接可以获取公网 IP 的话，可以在 OpenWrt 路由器上进行拨号 LuCI ---> 网络 ---> 接口 ---> WAN ipv6 IPS 下发 ipv6 地址的话，OpenWrt 路由器会自动为子设备提供 ipv6 地址； 如果 ISP 没有下发 ipv6 地址的话，也可以禁用 ipv6 作旁路由使用 OpenWrt 作旁路由（旁路网关），适用于 OpenWrt 路由器只有一个网口的情况，只做 lan 口使用，连接主路由 lan 口。 假设主路由 ip: 192.168.1.1, OpenWrt ip: 192.168.1.2 使用运营商 DNS 一般而言，运营商 DNS 的线路优化比起第三方 DNS 都比较好，不考虑 DNS 污染的情况下，可以使用默认设定，即使用运营商 DNS。这种情况下，无法获取纯净 DNS，也就无法使用科学上网。 设置主路由网关、DNS 为 192.168.1.2 设置 OpenWrt 路由器网关、DNS 为 192.168.1.1 自定义 DNS 自定义 DNS 一般是为了使用纯净 DNS，防止运营商 DNS 投毒或污染（如广告、GFW 干扰）。这种情况下，可以设置去广告、科学上网等功能。 设置主路由网关、DNS 为 192.168.1.2 设置 OpenWrt 路由器网关为 192.168.1.1；DNS 设置为自定义的 DNS 服务器 详见 OpenWrt 使用 Shadowsocks ChinaDNS Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make-my/xiaomi.html":{"url":"mybook/make-my/xiaomi.html","title":"适用于小米路由器青春版的 OpenWrt","keywords":"","body":"定制适用于 小米路由器青春版 硬件的 OpenWrt 在虚拟机上使用了一段时间 OpenWrt ，基本熟悉后，根据个人需求，确定好所需的软件包，开始着手定制个人使用的 OpenWrt 固件（在官方固件 OpenWrt 18.06.4 基础上）。 确定所需软件包 搭建环境 使用 SDK 编译所需的特定软件包（如 Shadowsocks） 使用 Image Builder 组装固件，生成个人定制版固件 准备 一台 Mac Ubuntu 14.04 LTS（运行在 VMware ）- 阅读：在 Mac 上使用 VMware 安装 Ubuntu 14.04 LTS 一台 小米路由器青春版 确定所需软件包 官方软件包 LuCI 及其依赖 luci-i18n-base-zh-cn - LuCI 中文语言包 luci-app-firewall - 防火墙 luci-i18n-firewall-zh-cn - 软件包 luci-app-firewall 的中文语言包 luci-app-ddns - 动态 DDNS luci-i18n-ddns-zh-cn - 软件包 luci-app-ddns 的中文语言包 ddns-scripts - 动态 DDNS 依赖的脚本 luci-app-adblock - Adblock，著名的去广告软件 luci-i18n-adblock-zh-cn - 软件包 luci-app-adblock 的中文语言包 adblock - Adblock luci-app-sqm - 智能队列管理 SQM Qos，智能解决网络延迟和阻塞 sqm-scripts - SQM 依赖的脚本 libustream-openssl - support for https ca-bundle - support for https ca-certificates - support for https curl - 下载工具 wget - 下载工具 vsftpd - for sftp openssh-sftp-server - for sftp ipset - for shadowsocks gfwlist iptables-mod-nat-extra - for shadowsocks gfwlist dnsmasq-full - for shadowsocks gfwlist, 与 dnsmasq 相冲突，需要忽略 dnsmasq iptables-mod-tproxy - for shadowsocks UDP-Relay ttyd - 网页命令行终端 第三方软件包 LuCI 及其依赖 luci-app-ramfree - 释放内存 luci-app-fileassistant - 文件助手，支持上传文件、安装 IPK 软件包 luci-app-arpbind - IP/Mac 绑定 luci-i18n-arpbind-zh-cn - 软件包 luci-app-arpbind 的中文语言包 luci-app-autoreboot - 定时重启 luci-i18n-autoreboot-zh-cn - 软件包 luci-app-autoreboot 的中文语言包 luci-app-vlmcsd - KMS 服务器，用于激活 Windows 及 Office vlmcsd - KMS Server luci-app-ttyd - LuCI for ttyd luci-i18n-ttyd-zh-cn - 软件包 luci-app-ttyd 的中文语言包 luci-app-shadowsocks - LuCI for Shadowsocks shadowsocks-libev - shadowsocks-libev luci-app-chinadns - LuCI for ChinaDNS ChinaDNS - ChinaDNS luci-app-dns-forwarder - LuCI for DNS Forwarder dns-forwarder - DNS Forwarder luci-i18n-sqm - 软件包 luci-app-sqm 的中文语言包 搭建环境 Ubuntu 14.04 LTS (运行在虚拟机 VMware 上， IP: 192.168.128.140， 终端可翻墙) 在 Mac 上 SSH 连接 Ubuntu 虚拟机 ssh stuart@192.168.128.140 新建脚本 set-xiaomi.sh touch set-xiaomi.sh 编辑脚本 set-xiaomi.sh #!/usr/bin/env bash cd ~ # image builder wget http://downloads.openwrt.org/releases/18.06.4/targets/ramips/mt76x8/openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz tar -xvf openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz mv openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64 openwrt-imagebuilder-xiaomi rm -rf openwrt-imagebuilder-18.06.4-ramips-mt76x8.Linux-x86_64.tar.xz # sdk wget https://downloads.openwrt.org/releases/18.06.4/targets/ramips/mt76x8/openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64.tar.xz tar -xvf openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64.tar.xz mv openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64 openwrt-sdk-xiaomi rm -rf openwrt-sdk-18.06.4-ramips-mt76x8_gcc-7.3.0_musl.Linux-x86_64.tar.xz # ln image builder mkdir -p /home/stuart/openwrt-imagebuilder-xiaomi/bin/targets/ramips/mt76x8 mkdir -p /home/stuart/image-bins rm /home/stuart/image-bins/xiaomi ln -s /home/stuart/openwrt-imagebuilder-xiaomi/bin/targets/ramips/mt76x8 /home/stuart/image-bins/xiaomi # ln sdk mkdir -p /home/stuart/openwrt-sdk-xiaomi/bin/packages/mipsel_24kc/stuart mkdir -p /home/stuart/sdk-ipks rm /home/stuart/sdk-ipks/xiaomi ln -s /home/stuart/openwrt-sdk-xiaomi/bin/packages/mipsel_24kc/stuart /home/stuart/sdk-ipks/xiaomi 终端开启翻墙 - startss, 执行脚本 set-xiaomi.sh, 进行环境部署 startss bash set-xiaomi.sh 至此，在 /home/stuart 用户目录下，存在 image-bins 和 sdk-ipks 两个目录，用来存放编译后的固件和 .ipk 软件包文件 使用 SDK 编译所需的特定软件包 添加个人软件包源码 终端开启翻墙 - startss，下载源码 cd ~ && git clone https://github.com/stuarthua/oh-my-openwrt 编辑 ~/openwrt-sdk-xiaomi/feeds.conf.default 文件，添加个人源码路径 vi ~/openwrt-sdk-xiaomi/feeds.conf.default # 添加 src-link stuart /home/stuart/oh-my-openwrt/stuart feeds 更新和安装 更新 SDK 中的 feeds 并安装 cd ~/openwrt-sdk-xiaomi && ./scripts/feeds update -a && ./scripts/feeds install -a 编译 新建脚本 make-ipks.sh #!/usr/bin/env bash # update cd ~/oh-my-openwrt && git pull origin master cd ~/openwrt-sdk-xiaomi && ./scripts/feeds update stuart && ./scripts/feeds install -a -p stuart # clean rm -rf /home/stuart/openwrt-sdk-xiaomi/bin/packages/mipsel_24kc/stuart mkdir -p /home/stuart/openwrt-sdk-xiaomi/bin/packages/mipsel_24kc/stuart # make # make package/helloworld/compile V=s # make package/luci-app-stuart/compile V=s # 迅雷快鸟 # make package/luci-app-xlnetacc/compile V=s # 定时唤醒 # make package/luci-app-timewol/compile V=s # 上网时间控制 # make package/luci-app-mia/compile V=s # 访问控制 # make package/luci-app-webrestriction/compile V=s # 网址过滤 # make package/luci-app-weburl/compile V=s # adbyby 去广告 # make package/adbyby/compile V=s # make package/luci-app-adbyby-plus/compile V=s # lean 翻墙三合一 # make package/shadowsocksr-libev/compile V=s # make package/kcptun/compile V=s # make package/v2ray/compile V=s # make package/pdnsd-alt/compile V=s # make package/luci-app-ssr-plus/compile V=s # USB 打印服务器 # make package/luci-app-usb-printer/compile V=s # 释放内存 make package/luci-app-ramfree/compile V=s # 文件助手 make package/luci-app-fileassistant/compile V=s # IP/Mac 绑定 make package/luci-app-arpbind/compile V=s # 定时重启 make package/luci-app-autoreboot/compile V=s # KMS 自动激活（用于激活大客户版 Windows 及 Office） make package/vlmcsd/compile V=s make package/luci-app-vlmcsd/compile V=s # SQM 中文语言包 make package/luci-i18n-sqm/compile V=s # 网页终端命令行 make package/luci-app-ttyd/compile V=s 执行编译脚本 make-ipks.sh bash make-ipks.sh 在 ~/sdk-ipks/xiaomi 目录查看生成的 .ipk 软件包文件 使用 Image Builder 组装固件 添加个性化配置文件 终端开启翻墙 - startss，下载个性户配置文件 (一些路由器设置，如默认地址、密码、语言、时区等) cd ~ && git clone https://github.com/stuarthua/oh-my-openwrt oh-my-openwrt-devices && cd ~/oh-my-openwrt-devices && git checkout -b devices origin/devices 编译 新建脚本 make-image.sh #!/usr/bin/env bash # update cd ~/oh-my-openwrt-devices && git pull origin devices cd ~/openwrt-imagebuilder-xiaomi # clean rm -rf /home/stuart/openwrt-imagebuilder-xiaomi/bin/targets/ramips/mt76x8 mkdir -p /home/stuart/openwrt-imagebuilder-xiaomi/bin/targets/ramips/mt76x8 rm -rf ~/openwrt-imagebuilder-xiaomi/packages/stuart # add ipks from stuart cp -r ~/openwrt-sdk-xiaomi/bin/packages/mipsel_24kc/stuart ~/openwrt-imagebuilder-xiaomi/packages # add ipks from shadowsocks (@aa65535 openwrt-dist) @http://openwrt-dist.sourceforge.net/ cp -r ~/oh-my-openwrt-devices/packages/all/openwrt-dist/*.ipk ~/openwrt-imagebuilder-xiaomi/packages/stuart cp -r ~/oh-my-openwrt-devices/packages/xiaomi/openwrt-dist/*.ipk ~/openwrt-imagebuilder-xiaomi/packages/stuart # make ORG_ORIGIN_PKGS=\"base-files busybox dnsmasq dropbear firewall fstools fwtool hostapd-common ip6tables iptables iw iwinfo jshn jsonfilter kernel kmod-cfg80211 kmod-gpio-button-hotplug kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-offload kmod-leds-gpio kmod-lib-crc-ccitt kmod-mac80211 kmod-mt76 kmod-mt76-core kmod-mt7603 kmod-mt76x02-common kmod-mt76x2 kmod-mt76x2-common kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-ipt6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-nls-base kmod-ppp kmod-pppoe kmod-pppox kmod-slhc libblobmsg-json libc libgcc libip4tc libip6tc libiwinfo libiwinfo-lua libjson-c libjson-script liblua liblucihttp liblucihttp-lua libnl-tiny libpthread libubox libubus libubus-lua libuci libuclient libxtables logd lua luci luci-app-firewall luci-base luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-proto-ipv6 luci-proto-ppp luci-theme-bootstrap mtd netifd odhcp6c odhcpd-ipv6only openwrt-keyring opkg ppp ppp-mod-pppoe procd rpcd rpcd-mod-rrdns swconfig ubox ubus ubusd uci uclient-fetch uhttpd usign wireless-regdb wpad-mini\" CUSTOM_ORG_PKGS=\"luci-i18n-base-zh-cn -kmod-usb-core -kmod-usb2 -kmod-usb-ohci -kmod-usb-ledtrig-usbport luci-i18n-firewall-zh-cn luci-app-ddns luci-i18n-ddns-zh-cn luci-app-adblock luci-i18n-adblock-zh-cn luci-app-sqm libustream-openssl ca-bundle ca-certificates curl wget vsftpd openssh-sftp-server ipset iptables-mod-nat-extra -dnsmasq dnsmasq-full iptables-mod-tproxy ttyd\" CUSTOM_PKGS=\"luci-app-ramfree luci-app-fileassistant luci-app-arpbind luci-i18n-arpbind-zh-cn luci-app-autoreboot luci-i18n-autoreboot-zh-cn vlmcsd luci-app-vlmcsd luci-i18n-vlmcsd-zh-cn luci-app-ttyd luci-i18n-ttyd-zh-cn shadowsocks-libev luci-app-shadowsocks ChinaDNS luci-app-chinadns dns-forwarder luci-app-dns-forwarder\" IMAGE_PKGS=\"$ORG_ORIGIN_PKGS $CUSTOM_ORG_PKGS $CUSTOM_PKGS\" make image PROFILE=miwifi-nano PACKAGES=\"$IMAGE_PKGS\" FILES=~/oh-my-openwrt-devices/devices/xiaomi echo \"编译结束\" 执行编译脚本 make-image.sh bash make-image.sh 在 ~/image-bins/xiaomi 目录查看生成的固件 提示 OpenWrt 18.06.4 小米路由器 NANO 官方固件中默认安装的包有 $ echo `opkg list_installed | awk '{ print $1 }'` base-files busybox dnsmasq dropbear firewall fstools fwtool hostapd-common ip6tables iptables iw iwinfo jshn jsonfilter kernel kmod-cfg80211 kmod-gpio-button-hotplug kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-nat kmod-ipt-offload kmod-leds-gpio kmod-lib-crc-ccitt kmod-mac80211 kmod-mt76 kmod-mt76-core kmod-mt7603 kmod-mt76x02-common kmod-mt76x2 kmod-mt76x2-common kmod-nf-conntrack kmod-nf-conntrack6 kmod-nf-flow kmod-nf-ipt kmod-nf-ipt6 kmod-nf-nat kmod-nf-reject kmod-nf-reject6 kmod-nls-base kmod-ppp kmod-pppoe kmod-pppox kmod-slhc kmod-usb-core kmod-usb-ehci kmod-usb-ledtrig-usbport kmod-usb-ohci kmod-usb2 libblobmsg-json libc libgcc libip4tc libip6tc libiwinfo libiwinfo-lua libjson-c libjson-script liblua liblucihttp liblucihttp-lua libnl-tiny libpthread libubox libubus libubus-lua libuci libuclient libxtables logd lua luci luci-app-firewall luci-base luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-proto-ipv6 luci-proto-ppp luci-theme-bootstrap mtd netifd odhcp6c odhcpd-ipv6only openwrt-keyring opkg ppp ppp-mod-pppoe procd rpcd rpcd-mod-rrdns swconfig ubox ubus ubusd uci uclient-fetch uhttpd usign wireless-regdb wpad-mini 小米路由器青春版与 NANO 配置一样，只是去掉了 USB，故而可以忽略 USB 模块相关的包 -kmod-usb-core -kmod-usb2 -kmod-usb-ohci -kmod-usb-ledtrig-usbport 安装固件 参考 - 小米路由器青春版使用官方 OpenWrt Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make-my/use-xiaomi.html":{"url":"mybook/make-my/use-xiaomi.html","title":"使用说明","keywords":"","body":"使用小米路由器青春版固件 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make-my/packages/use-package.html":{"url":"mybook/make-my/packages/use-package.html","title":"使用软件包","keywords":"","body":"使用软件包 本章介绍一些个人常用的软件包及其简单使用 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make-my/packages/use-package-adblock.html":{"url":"mybook/make-my/packages/use-package-adblock.html","title":"使用软件包 Adblock","keywords":"","body":"使用软件包 Adblock Adblock 去广告 安装 opkg update opkg install luci-i18n-base-zh-cn opkg install libustream-openssl opkg install adblock luci-app-adblock luci-i18n-adblock-zh-cn 使用 LuCI ---> 服务 ---> Adblock 勾选启用 勾选 reg_cn 拦截列表，拦截国内广告 LuCI ---> 服务 ---> Adblock ---> 高级 ---> 编辑黑名单 添加屏蔽小米广告的域名 (引自小米净化APP) a.stat.xiaomi.com a.union.mi.com abtest.mistat.xiaomi.com adinfo.ra1.xlmc.sec.miui.com adv.sec.miui.com api.ad.xiaomi.com api.ra2.xlmc.sec.miui.com api.tuisong.baidu.com api.tw06.xlmc.sec.miui.com app01.nodes.gslb.mi-idc.com app02.nodes.gslb.mi-idc.com app03.nodes.gslb.mi-idc.com applog.uc.cn beha.ksmobile.com bss.pandora.xiaomi.com calopenupdate.comm.miui.com cdn.ad.xiaomi.com cm.p4p.cn.yahoo.com cm066.getui.igexin.com connect.rom.miui.com data.mistat.xiaomi.com e.ad.xiaomi.com etl.xlmc.sandai.net fcanr.tracking.miui.com fclick.baidu.com get.sogou.com hm.xiaomi.com hub5pn.wap.sandai.net idx.m.hub.sandai.net image.box.xiaomi.com info.analysis.kp.sec.miui.com info.sec.miui.com logupdate.avlyun.sec.miui.com m.bss.pandora.xiaomi.com m.irs01.com m.sjzhushou.com master.wap.dphub.sandai.net mdap.alipaylog.com migc.g.mi.com migcreport.g.mi.com migrate.driveapi.micloud.xiaomi.net mis.g.mi.com mlog.search.xiaomi.net new.api.ad.xiaomi.com notice.game.xiaomi.com nsclick.baidu.com o2o.api.xiaomi.com p.alimama.com pdc.micloud.xiaomi.net ppurifier.game.xiaomi.com pre.api.tw06.xlmc.sandai.net r.browser.miui.com reader.browser.miui.com report.adview.cn resolver.gslb.mi-idc.com resolver.msg.xiaomi.net sa.tuisong.baidu.com sa3.tuisong.baidu.com sdk.open.phone.igexin.com sdk.open.talk.gepush.com sdk.open.talk.igexin.com sdkconfig.ad.xiaomi.com sec-cdn.static.xiaomi.net sec.resource.xiaomi.net security.browser.miui.com sg.a.stat.mi.com staging.admin.e.mi.com test.ad.xiaomi.com test.api.xlmc.sandai.net test.e.ad.xiaomi.com test.new.api.ad.xiaomi.com tracking.miui.com tw13b093.sandai.net union.dbba.cn update.avlyun.sec.miui.com www.adview.cn yun.rili.cn zhwnlapi.etouch.cn api.comm.miui.com 重启路由器即可。 如果想手动更新屏蔽列表，LuCI ---> 服务 ---> Adblock 点击 Refresh 即可。 测试视频： 优酷：http://v.youku.com/v_show/id_XMTQ2MjA5MzE5Ng==.html 爱奇艺：http://www.iqiyi.com/v_19rrl6p15k.html 腾讯视频：http://v.qq.com/cover/5/5fs2bn3beyv0rbo/r00192d3ruz.html 乐视网：http://www.letv.com/ptv/vplay/24371048.html 芒果 TV：http://www.mgtv.com/v/2/166072/f/2949223.html PPTV 聚力：http://v.pptv.com/show/4atBviaaMicDqdGibc.html Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make-my/packages/use-package-ddns.html":{"url":"mybook/make-my/packages/use-package-ddns.html","title":"使用软件包 DDNS","keywords":"","body":"使用软件包 DDNS 动态 DDNS。用于有公网 IP 的情况下，进行远程访问 OpenWrt 路由器，需要光猫桥接。以使用阿里云 DDNS 为例 使用动态 DDNS，是为了可以远程访问 OpenWrt 路由器，但这也可能增加被黑客入侵的风险。使用时，推荐同时开启 Https 访问，增加远程访问的安全系数 安装 opkg update opkg install luci-i18n-base-zh-cn opkg install ddns-scripts luci-app-ddns luci-i18n-ddns-zh-cn ## 阿里云 DDNS @https://github.com/stuarthua/oh-my-openwrt/tree/devices/packages opkg install ddns-scripts_aliyun_1.0.0-1_all.ipk 使用 LuCI ---> 服务 ---> 动态 DDNS 一般而言，选择编辑 ipv4 即可（ipv6 还未普及）。 \"DDNS 服务提供商\" 选择 aliyun.com; 填入用户名、密码 (阿里云的 AccessKeyID 和 AccessKeySecret) Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/make-my/packages/use-package-uhttpd.html":{"url":"mybook/make-my/packages/use-package-uhttpd.html","title":"使用软件包 uHTTPd","keywords":"","body":"使用软件包 uHTTPd uHTTPd, 一个轻量级单线程 HTTP(S) 服务器。用于在 LuCI 界面中设置 Https 需要使用 DDNS 远程访问 OpenWrt 路由器的话，推荐开启 Https 访问 安装 opkg update opkg install luci-i18n-base-zh-cn opkg install uhttpd luci-app-uhttpd luci-i18n-uhttpd-zh-cn 使用 LuCI ---> 服务 ---> uHTTPd Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/other/qa.html":{"url":"mybook/other/qa.html","title":"常见问题","keywords":"","body":"常见问题 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/other/appendix.html":{"url":"mybook/other/appendix.html","title":"附录","keywords":"","body":"附录 USB 转以太网口驱动： 绿联USB千兆网卡AX88179芯片驱动 树莓派安装OpenWRT做路由器图文详解 OpenWrt 常用网络配置 OpenWrt Adding a secondary card package: kmod-usb-net-asix-ax88179 OpenWrt 作旁路由/网关使用： LEDE作为旁路路由辅助网关 树莓派安装LEDE作为旁路网关去广告，防止DNS污染 OpenWrt 去广告： LEDE/OpenWrt路由器使用Adblock屏蔽小米广告 OpenWrt 路由器过滤广告的N种方法 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"mybook/other/mac-vmware-install-ubuntu.html":{"url":"mybook/other/mac-vmware-install-ubuntu.html","title":"在 Mac 上使用 VMware 安装 Ubuntu 14.04 LTS","keywords":"","body":"在 Mac 上使用 VMware 安装 Ubuntu 14.04 LTS 严格意义上讲，编译 OpenWrt 或其软件包使用 Ubuntu 14.04 或者 16.04 甚至更高的版本都可。虽然 Ubuntu 14.04 已于 2019 年 4 月 30 日结束技术支持，但使用其他版本在编译过程中有可能会提示缺少一些特定的库，这很令人烦恼，故而推荐使用 Ubuntu 14.04 LTS 对 OpenWrt 及其软件包进行编译。 以下记录 Mac 使用 VMware 安装 Ubuntu 14.04 的过程，仅供参考。 下载 Ubuntu 14.04 LTS 官网地址：http://releases.ubuntu.com/ 64 位 Server 版本下载地址：http://releases.ubuntu.com/trusty/ubuntu-14.04.6-server-amd64.iso 安装 Ubuntu 14.04 LTS 打开 VMware Fusion，新建虚拟机，导入 ubuntu-14.04.6-server-amd64.iso 设置虚拟机名称 Ubuntu 64 Server 14.04.6.vmwarevm 设置虚拟机磁盘大小，推荐 50G（频繁编译 OpenWrt 可能会用到 30-40 G） 设置处理器核数，推荐 4 核（视个人电脑情况而定） 启动 Ubuntu，选择中文 安装 Ubuntu 服务器版 选择语言 选择时区 选择国家 配置键盘风格 等待加载组件，配置网络 输入主机名 设置用户名和密码 设置时钟，默认即可 磁盘分区 等待安装系统 配置软件包管理器，提示是否设置代理，否 等待配置 apt（此过程需要下载文件，耗时较久，耐心等待即可） 设置自动安装安全更新 选择并安装软件 安装 GRUB 启动引导器 安装结束 一些常用设置 设置 SSH 密码登录 默认情况下，Ubuntu 禁止使用密码登陆，但因为是本机电脑上的虚拟机，所以使用弱口令的密码登陆也可，无须开启 publickey 公钥登录。 安装 SSH 服务端 openssh $ sudo apt-get install openssh-server 安装 Vim 编辑器 $ sudo apt-get install vim 使用 Vim 编辑 /etc/ssh/sshd_config, 开启密码登陆 ## 关闭 publickey登录 找到如下内容： RSAAuthentication yes PubkeyAuthentication yes #AuthorizedKeysFile %h/.ssh/authorized_keys 替换为： #RSAAuthentication yes PubkeyAuthentication no #AuthorizedKeysFile %h/.ssh/authorized_keys ## 开启密码登录 找到如下内容： PasswordAuthentication no 替换为： PasswordAuthentication yes 重启 ssh： sudo /etc/init.d/ssh restart 更换源 阿里云开源镜像站：https://opsx.alibaba.com/mirror 点击镜像选项，找到 ubuntu，查看 “帮助”，即可找到对应版本的镜像源 SSH 连接虚拟机 Ubuntu (IP: 192.168.69.140): $ ssh stuart@192.168.69.140 备份 /etc/apt/sources.list $ sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak 编辑 /etc/apt/sources.list, 输入 14.04 阿里源： deb https://mirrors.aliyun.com/ubuntu/ trusty main restricted deb-src https://mirrors.aliyun.com/ubuntu/ trusty main restricted deb https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted deb-src https://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted deb https://mirrors.aliyun.com/ubuntu/ trusty universe deb-src https://mirrors.aliyun.com/ubuntu/ trusty universe deb https://mirrors.aliyun.com/ubuntu/ trusty-updates universe deb-src https://mirrors.aliyun.com/ubuntu/ trusty-updates universe deb https://mirrors.aliyun.com/ubuntu/ trusty multiverse deb-src https://mirrors.aliyun.com/ubuntu/ trusty multiverse deb https://mirrors.aliyun.com/ubuntu/ trusty-updates multiverse deb-src https://mirrors.aliyun.com/ubuntu/ trusty-updates multiverse deb https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse deb-src https://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu trusty-security main restricted deb-src http://mirrors.aliyun.com/ubuntu trusty-security main restricted deb http://mirrors.aliyun.com/ubuntu trusty-security universe deb-src http://mirrors.aliyun.com/ubuntu trusty-security universe deb http://mirrors.aliyun.com/ubuntu trusty-security multiverse deb-src http://mirrors.aliyun.com/ubuntu trusty-security multiverse 执行更新 sudo apt-get update 中文设置 安装中文语言包 $ sudo apt-get install language-pack-zh-hans language-pack-zh-hans-base 生成字符集 $ sudo locale-gen 使用最新生成的字符集更新本地仓库 $ sudo dpkg-reconfigure locales 更新 /etc/default/locale 文件 LANG=\"zh_CN.UTF-8\" LANGUAGE=\"zh_CN:zh:en_US:en\" LC_NUMERIC=\"zh_CN\" LC_TIME=\"zh_CN\" LC_MONETARY=\"zh_CN\" LC_PAPER=\"zh_CN\" LC_NAME=\"zh_CN\" LC_ADDRESS=\"zh_CN\" LC_TELEPHONE=\"zh_CN\" LC_MEASUREMENT=\"zh_CN\" LC_IDENTIFICATION=\"zh_CN\" 重新登录 设置终端翻墙 Mac 已经安装 shadowsocksx-ng，可以使用其 Http 代理为虚拟机提供翻墙服务。 设置 shadowsocksx-ng 的 Http 代理监听地址为：0.0.0.0 进入虚拟机，编辑 ~/.bashrc（注意，192.168.2.73 为 Mac 的 IP） function startss() { export no_proxy=\"localhost,127.0.0.1,192.168.*.*,10.*.*.*,127.*.*.*,172.*.*.*\" export http_proxy=\"http://192.168.2.73:1087\" export https_proxy=$http_proxy echo -e \"已开启终端代理\" curl ip.gs } function stopss() { unset http_proxy unset https_proxy echo -e \"已关闭终端代理\" curl ip.gs } function showss() { curl ip.gs } 更新设置 source ~/.bashrc 设置 Shell 支持 256color 进入虚拟机，编辑 ~/.bashrc: 找到如下内容： case \"$TERM\" in xterm-color) color_prompt=yes;; esac 替换为： case \"$TERM\" in xterm-color|*-256color) color_prompt=yes;; esac 更新设置 source ~/.bashrc 升级内置软件及内核 $ sudo apt-get upgrade $ sudo apt-get dist-upgrade 安装一些必备软件 $ sudo apt-get install git 清理 autoclean apt-get autoclean 如果你的硬盘空间不大的话，可以定期运行这个程序，将已经删除了的软件包的 .deb 安装文件从硬盘中删除掉。 clean 如果你仍然需要硬盘空间的话，可以试试 apt-get clean，这会把你已安装的软件包的安装包也删除掉，当然多数情况下这些包没什么用了，因此这是个为硬盘腾地方的好办法。 apt-get clean 类似上面的命令，但它删除包缓存中的所有包。这是个很好的做法，因为多数情况下这些包没有用了。但如果你是拨号上网的话，就得重新考虑了。 autoremove apt-get autoremove 删除为了满足其他软件包的依赖而安装的，但现在不再需要的软件包。 remove apt-get remove 软件包名称： 删除已安装的软件包（保留配置文件）。 --purge remove apt-get --purge remove 软件包名称： 删除已安装包（不保留配置文件)。 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"Git 分散式版本控制软件 Markdown Aaron Swartz 跟John Gruber共同设计的排版语言 OpenWrt OpenWrt 是适合于嵌入式设备的一个 Linux 发行版。相对原厂固件而言，OpenWrt 不是一个单一、静态的固件，而是提供了一个可添加软件包的可写的文件系统。这使用户可以自由的选择应用程序和配置，而不必受设备提供商的限制，并且可以使用一些适合某方面应用的软件包来定制你的设备 Copyright © stuarthua.com 2019            该文件修订时间： 2019-10-04 21:07:40 "}}